
VolCtrl_FW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  0000100c  000010a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000100c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000261  00800296  00800296  00001236  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da9  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9b  00000000  00000000  000031b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5b  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cd  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001058  00000000  00000000  000058dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_18>
      4c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_28>
      74:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_29>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec e0       	ldi	r30, 0x0C	; 12
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 39       	cpi	r26, 0x96	; 150
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	24 e0       	ldi	r18, 0x04	; 4
      d8:	a6 e9       	ldi	r26, 0x96	; 150
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a7 3f       	cpi	r26, 0xF7	; 247
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
      ea:	0c 94 04 08 	jmp	0x1008	; 0x1008 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <volup>:
							{0, &voldown, "voldown"},
							{2, &setVolume, "setvol"}};


void volup(uint8_t argc, char *argv[]){
	uart0_puts("volup detected\r\n");
      f2:	8c e3       	ldi	r24, 0x3C	; 60
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
      fa:	08 95       	ret

000000fc <voldown>:
}

void voldown(uint8_t argc, char *argv[]){
	uart0_puts("voldown detected\r\n");
      fc:	8d e4       	ldi	r24, 0x4D	; 77
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
     104:	08 95       	ret

00000106 <setVolume>:
}

void setVolume(uint8_t argc, char *argv[]){
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <setVolume+0x12>
     118:	00 d0       	rcall	.+0      	; 0x11a <setVolume+0x14>
     11a:	1f 92       	push	r1
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	f8 2e       	mov	r15, r24
     122:	6b 01       	movw	r12, r22
		
		
	char buffer[5];
		
	uart0_puts("setvolume detected\r\n");
     124:	80 e6       	ldi	r24, 0x60	; 96
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		
	uart0_puts("argc: ");
     12c:	85 e7       	ldi	r24, 0x75	; 117
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
	uart0_puts(itoa(argc, buffer, 10));
     134:	0f 2d       	mov	r16, r15
     136:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     138:	4a e0       	ldi	r20, 0x0A	; 10
     13a:	be 01       	movw	r22, r28
     13c:	6f 5f       	subi	r22, 0xFF	; 255
     13e:	7f 4f       	sbci	r23, 0xFF	; 255
     140:	c8 01       	movw	r24, r16
     142:	0e 94 07 05 	call	0xa0e	; 0xa0e <__itoa_ncheck>
     146:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
	uart0_puts("\r\n");
     14a:	8b ec       	ldi	r24, 0xCB	; 203
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		
	for (int i=0; i < argc; i++)
     152:	10 16       	cp	r1, r16
     154:	11 06       	cpc	r1, r17
     156:	c4 f4       	brge	.+48     	; 0x188 <setVolume+0x82>
     158:	86 01       	movw	r16, r12
     15a:	ef 2c       	mov	r14, r15
     15c:	f1 2c       	mov	r15, r1
     15e:	ee 0c       	add	r14, r14
     160:	ff 1c       	adc	r15, r15
     162:	ec 0c       	add	r14, r12
     164:	fd 1c       	adc	r15, r13
	{
		uart0_puts("argv: ");
     166:	8c e7       	ldi	r24, 0x7C	; 124
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		uart0_puts(argv[i]);
     16e:	f8 01       	movw	r30, r16
     170:	81 91       	ld	r24, Z+
     172:	91 91       	ld	r25, Z+
     174:	8f 01       	movw	r16, r30
     176:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		uart0_puts("\r\n");
     17a:	8b ec       	ldi	r24, 0xCB	; 203
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		
	uart0_puts("argc: ");
	uart0_puts(itoa(argc, buffer, 10));
	uart0_puts("\r\n");
		
	for (int i=0; i < argc; i++)
     182:	0e 15       	cp	r16, r14
     184:	1f 05       	cpc	r17, r15
     186:	79 f7       	brne	.-34     	; 0x166 <setVolume+0x60>
	{
		uart0_puts("argv: ");
		uart0_puts(argv[i]);
		uart0_puts("\r\n");
	}
}
     188:	0f 90       	pop	r0
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	1f 91       	pop	r17
     198:	0f 91       	pop	r16
     19a:	ff 90       	pop	r15
     19c:	ef 90       	pop	r14
     19e:	df 90       	pop	r13
     1a0:	cf 90       	pop	r12
     1a2:	08 95       	ret

000001a4 <cmd_parser>:
          Calls the matching command function with arguments
Input:    pointer to a char array
Returns:  0x00 no error occoured
		  0x01 error occoured
**************************************************************************/			 
uint8_t cmd_parser(char* cmd){
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	27 97       	sbiw	r28, 0x07	; 7
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
     1c8:	8c 01       	movw	r16, r24
					 
	if (ECHO_EN) {
		uart0_puts(cmd);
     1ca:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		uart0_puts("\r\n");
     1ce:	8b ec       	ldi	r24, 0xCB	; 203
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
	}
					 
	command_ptr detc_cmd = NULL;
	char delim[] = " ,";		// " " and ","
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	9c e2       	ldi	r25, 0x2C	; 44
     1da:	9a 83       	std	Y+2, r25	; 0x02
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	1b 82       	std	Y+3, r1	; 0x03
	char *argv[MAX_NUM_ARG];	//argument vector containing pointers to strings
	uint8_t tmp_strlen;

	//convert input string to lowercase
	//command interpreter should be case insensitive
	strlwr(cmd);
     1e0:	c8 01       	movw	r24, r16
     1e2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <strlwr>
					 
	//Receive the first token
	char *token = strtok(cmd, delim);
     1e6:	be 01       	movw	r22, r28
     1e8:	6f 5f       	subi	r22, 0xFF	; 255
     1ea:	7f 4f       	sbci	r23, 0xFF	; 255
     1ec:	c8 01       	movw	r24, r16
     1ee:	0e 94 c1 04 	call	0x982	; 0x982 <strtok>
     1f2:	5c 01       	movw	r10, r24
     1f4:	06 e0       	ldi	r16, 0x06	; 6
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	0f 2e       	mov	r0, r31
     1fa:	fc e3       	ldi	r31, 0x3C	; 60
     1fc:	cf 2e       	mov	r12, r31
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	df 2e       	mov	r13, r31
     202:	f0 2d       	mov	r31, r0
	if (ECHO_EN) {
		uart0_puts(cmd);
		uart0_puts("\r\n");
	}
					 
	command_ptr detc_cmd = NULL;
     204:	e1 2c       	mov	r14, r1
     206:	f1 2c       	mov	r15, r1
					 
	//The first token is the command word
	for (int i = 0; i < NUM_CMDS; i++)
	{
		//search for the input cmd string in available commands
		if ( strcmp( token, cmd_set[i].cmd_word ) == 0)
     208:	b8 01       	movw	r22, r16
     20a:	6d 5f       	subi	r22, 0xFD	; 253
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	c5 01       	movw	r24, r10
     210:	0e 94 c6 04 	call	0x98c	; 0x98c <strcmp>
     214:	89 2b       	or	r24, r25
     216:	09 f4       	brne	.+2      	; 0x21a <cmd_parser+0x76>
		{
			//cmd string matches a command
			detc_cmd = &cmd_set[i];
     218:	78 01       	movw	r14, r16
     21a:	0e 5e       	subi	r16, 0xEE	; 238
     21c:	1f 4f       	sbci	r17, 0xFF	; 255
					 
	//Receive the first token
	char *token = strtok(cmd, delim);
					 
	//The first token is the command word
	for (int i = 0; i < NUM_CMDS; i++)
     21e:	0c 15       	cp	r16, r12
     220:	1d 05       	cpc	r17, r13
     222:	91 f7       	brne	.-28     	; 0x208 <cmd_parser+0x64>
			//cmd string matches a command
			detc_cmd = &cmd_set[i];
		}
	}
					 
	if (detc_cmd == NULL){
     224:	e1 14       	cp	r14, r1
     226:	f1 04       	cpc	r15, r1
     228:	31 f4       	brne	.+12     	; 0x236 <cmd_parser+0x92>
		//No cmd string found
		uart0_puts("Unknown command!\r\n");
     22a:	83 e8       	ldi	r24, 0x83	; 131
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		return -1;
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	87 c0       	rjmp	.+270    	; 0x344 <cmd_parser+0x1a0>
	//all other tokens are arguments
	//Collect all arguments in cmd
	argc = 0;
	err = 0;
					 
	token = strtok(NULL, delim);
     236:	be 01       	movw	r22, r28
     238:	6f 5f       	subi	r22, 0xFF	; 255
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 c1 04 	call	0x982	; 0x982 <strtok>
     244:	8c 01       	movw	r16, r24
	while(token != NULL)
     246:	89 2b       	or	r24, r25
     248:	09 f4       	brne	.+2      	; 0x24c <cmd_parser+0xa8>
     24a:	69 c0       	rjmp	.+210    	; 0x31e <cmd_parser+0x17a>
     24c:	d1 2c       	mov	r13, r1
	{
		//ignore empty tokens (eg. 10, 11) the " " would be a empty token
		if( !(strcmp(token, "") == 0) ){
     24e:	d8 01       	movw	r26, r16
     250:	8c 91       	ld	r24, X
     252:	88 23       	and	r24, r24
     254:	b9 f1       	breq	.+110    	; 0x2c4 <cmd_parser+0x120>

			//Check number of arguments
			if ((argc >= detc_cmd->arg_cnt) || (argc >= MAX_NUM_ARG)){
     256:	f7 01       	movw	r30, r14
     258:	80 81       	ld	r24, Z
     25a:	d8 16       	cp	r13, r24
     25c:	18 f4       	brcc	.+6      	; 0x264 <cmd_parser+0xc0>
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	fd 15       	cp	r31, r13
     262:	28 f4       	brcc	.+10     	; 0x26e <cmd_parser+0xca>
				uart0_puts("Too many arguments!\r\n");
     264:	86 e9       	ldi	r24, 0x96	; 150
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
				err = 1;
				break;
     26c:	37 c0       	rjmp	.+110    	; 0x2dc <cmd_parser+0x138>
			}
							 
			//Check argument string length
			tmp_strlen = strlen(token); // strlen is not including '\0'
     26e:	f8 01       	movw	r30, r16
     270:	01 90       	ld	r0, Z+
     272:	00 20       	and	r0, r0
     274:	e9 f7       	brne	.-6      	; 0x270 <cmd_parser+0xcc>
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	cf 01       	movw	r24, r30
     27a:	80 1b       	sub	r24, r16
     27c:	91 0b       	sbc	r25, r17
			if ( tmp_strlen + 1 >= MAX_ARG_LEN ){
     27e:	99 27       	eor	r25, r25
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	8f 30       	cpi	r24, 0x0F	; 15
     284:	91 05       	cpc	r25, r1
     286:	2c f0       	brlt	.+10     	; 0x292 <cmd_parser+0xee>
				uart0_puts("Max arg string length exceeded!\r\n");
     288:	8c ea       	ldi	r24, 0xAC	; 172
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
				err = 1;
				break;
     290:	25 c0       	rjmp	.+74     	; 0x2dc <cmd_parser+0x138>
			}
							 
			//allocate memory for argument string
			argv[argc] = (char *) malloc(tmp_strlen  + 1);
     292:	0e 94 a0 03 	call	0x740	; 0x740 <malloc>
     296:	ed 2d       	mov	r30, r13
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	ee 0f       	add	r30, r30
     29c:	ff 1f       	adc	r31, r31
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	2c 0f       	add	r18, r28
     2a4:	3d 1f       	adc	r19, r29
     2a6:	e2 0f       	add	r30, r18
     2a8:	f3 1f       	adc	r31, r19
     2aa:	94 83       	std	Z+4, r25	; 0x04
     2ac:	83 83       	std	Z+3, r24	; 0x03
							 
			if (argv[argc] == NULL){
     2ae:	00 97       	sbiw	r24, 0x00	; 0
     2b0:	29 f4       	brne	.+10     	; 0x2bc <cmd_parser+0x118>
				//Memory allocation failed
				uart0_puts("Memory allocation failed!\r\n");
     2b2:	8e ec       	ldi	r24, 0xCE	; 206
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
				err = 1;
				break;
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <cmd_parser+0x138>
			}
							 
			//copy the token to the argument vector
			strcpy(argv[argc] , token);
     2bc:	b8 01       	movw	r22, r16
     2be:	0e 94 cf 04 	call	0x99e	; 0x99e <strcpy>
							 
			//increase argument counter
			argc++;
     2c2:	d3 94       	inc	r13
		}
		//Fetch the next token to process
		token = strtok(NULL, delim);
     2c4:	be 01       	movw	r22, r28
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 c1 04 	call	0x982	; 0x982 <strtok>
     2d2:	8c 01       	movw	r16, r24
	//Collect all arguments in cmd
	argc = 0;
	err = 0;
					 
	token = strtok(NULL, delim);
	while(token != NULL)
     2d4:	89 2b       	or	r24, r25
     2d6:	09 f0       	breq	.+2      	; 0x2da <cmd_parser+0x136>
     2d8:	ba cf       	rjmp	.-140    	; 0x24e <cmd_parser+0xaa>
     2da:	22 c0       	rjmp	.+68     	; 0x320 <cmd_parser+0x17c>
		token = strtok(NULL, delim);
	}
					 
	//all arguments parsed, check if the correct number of arguments was found
	//do not print a error message if the err flag is already set
	if ( (argc != detc_cmd->arg_cnt) && (err == 0) ){
     2dc:	d7 01       	movw	r26, r14
     2de:	8c 91       	ld	r24, X
     2e0:	8d 11       	cpse	r24, r13
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <cmd_parser+0x186>
     2e4:	ff 24       	eor	r15, r15
     2e6:	f3 94       	inc	r15
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <cmd_parser+0x150>
		uart0_puts("Incorrect number of Arguments!\r\n");
     2ea:	8a ee       	ldi	r24, 0xEA	; 234
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
     2f2:	1b c0       	rjmp	.+54     	; 0x32a <cmd_parser+0x186>
		//If all went fine call the command function and pass the arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
	}

	//free allocated memory
	for (int i = 0; i < argc; i++){
     2f4:	0d 2d       	mov	r16, r13
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	10 16       	cp	r1, r16
     2fa:	11 06       	cpc	r1, r17
     2fc:	5c f4       	brge	.+22     	; 0x314 <cmd_parser+0x170>
		free(argv[i]);
     2fe:	8c 81       	ldd	r24, Y+4	; 0x04
     300:	9d 81       	ldd	r25, Y+5	; 0x05
     302:	0e 94 38 04 	call	0x870	; 0x870 <free>
		//If all went fine call the command function and pass the arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
	}

	//free allocated memory
	for (int i = 0; i < argc; i++){
     306:	02 30       	cpi	r16, 0x02	; 2
     308:	11 05       	cpc	r17, r1
     30a:	24 f0       	brlt	.+8      	; 0x314 <cmd_parser+0x170>
		free(argv[i]);
     30c:	8e 81       	ldd	r24, Y+6	; 0x06
     30e:	9f 81       	ldd	r25, Y+7	; 0x07
     310:	0e 94 38 04 	call	0x870	; 0x870 <free>
	}
					 
	if (detc_cmd == NULL){
		//No cmd string found
		uart0_puts("Unknown command!\r\n");
		return -1;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	f1 10       	cpse	r15, r1
     318:	15 c0       	rjmp	.+42     	; 0x344 <cmd_parser+0x1a0>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	13 c0       	rjmp	.+38     	; 0x344 <cmd_parser+0x1a0>
	}
					 
	//all other tokens are arguments
	//Collect all arguments in cmd
	argc = 0;
     31e:	d1 2c       	mov	r13, r1
		token = strtok(NULL, delim);
	}
					 
	//all arguments parsed, check if the correct number of arguments was found
	//do not print a error message if the err flag is already set
	if ( (argc != detc_cmd->arg_cnt) && (err == 0) ){
     320:	f7 01       	movw	r30, r14
     322:	80 81       	ld	r24, Z
     324:	8d 11       	cpse	r24, r13
     326:	e1 cf       	rjmp	.-62     	; 0x2ea <cmd_parser+0x146>
     328:	03 c0       	rjmp	.+6      	; 0x330 <cmd_parser+0x18c>
		err=1;
	}
					 
	if (!err){
		//If all went fine call the command function and pass the arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
     32a:	ff 24       	eor	r15, r15
     32c:	f3 94       	inc	r15
     32e:	e2 cf       	rjmp	.-60     	; 0x2f4 <cmd_parser+0x150>
     330:	01 80       	ldd	r0, Z+1	; 0x01
     332:	f2 81       	ldd	r31, Z+2	; 0x02
     334:	e0 2d       	mov	r30, r0
     336:	be 01       	movw	r22, r28
     338:	6c 5f       	subi	r22, 0xFC	; 252
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	8d 2d       	mov	r24, r13
     33e:	09 95       	icall
     340:	f1 2c       	mov	r15, r1
     342:	d8 cf       	rjmp	.-80     	; 0x2f4 <cmd_parser+0x150>
		free(argv[i]);
	}
					 
	if (err) return 1;
	else return 0;
};
     344:	27 96       	adiw	r28, 0x07	; 7
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	df 90       	pop	r13
     35e:	cf 90       	pop	r12
     360:	bf 90       	pop	r11
     362:	af 90       	pop	r10
     364:	08 95       	ret

00000366 <uart0_errchk>:
Input:    None
Returns:  boolean false if no error was found; true if an error occured
**************************************************************************/
uint16_t uart0_errchk(uint16_t rec_val){
	
	if (rec_val & UART_FRAME_ERROR ){
     366:	93 ff       	sbrs	r25, 3
     368:	07 c0       	rjmp	.+14     	; 0x378 <uart0_errchk+0x12>
		uart0_puts("UART_FRAME_ERROR occurred!");
     36a:	8b e0       	ldi	r24, 0x0B	; 11
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		return UART_FRAME_ERROR;
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	38 e0       	ldi	r19, 0x08	; 8
     376:	1d c0       	rjmp	.+58     	; 0x3b2 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_OVERRUN_ERROR){
     378:	92 ff       	sbrs	r25, 2
     37a:	07 c0       	rjmp	.+14     	; 0x38a <uart0_errchk+0x24>
		uart0_puts("UART_OVERRUN_ERROR occurred!");
     37c:	86 e2       	ldi	r24, 0x26	; 38
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		return UART_OVERRUN_ERROR;
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	34 e0       	ldi	r19, 0x04	; 4
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_BUFFER_OVERFLOW){
     38a:	91 ff       	sbrs	r25, 1
     38c:	07 c0       	rjmp	.+14     	; 0x39c <uart0_errchk+0x36>
		uart0_puts("UART_BUFFER_OVERFLOW occurred!");
     38e:	83 e4       	ldi	r24, 0x43	; 67
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		return UART_BUFFER_OVERFLOW;
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	32 e0       	ldi	r19, 0x02	; 2
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_NO_DATA){
     39c:	9c 01       	movw	r18, r24
     39e:	22 27       	eor	r18, r18
     3a0:	31 70       	andi	r19, 0x01	; 1
     3a2:	90 ff       	sbrs	r25, 0
     3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <uart0_errchk+0x4c>
		uart0_puts("UART_NO_DATA occurred!");
     3a6:	82 e6       	ldi	r24, 0x62	; 98
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
		return UART_NO_DATA;
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	31 e0       	ldi	r19, 0x01	; 1
	}
	return 0;
     3b2:	c9 01       	movw	r24, r18
     3b4:	08 95       	ret

000003b6 <uart0_getln>:
Returns:  0x00 no bytes available
		  0x01 one line was read successfully
		  0x02 UART transmit Error occurred
**************************************************************************/
uint16_t uart0_getln(char* uart0_line_buf)
{
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	8c 01       	movw	r16, r24
	if (uart0_available() > 0){
     3c6:	0e 94 16 03 	call	0x62c	; 0x62c <uart0_available>
     3ca:	ec 01       	movw	r28, r24
     3cc:	89 2b       	or	r24, r25
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <uart0_getln+0x1c>
     3d0:	4c c0       	rjmp	.+152    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		static uint8_t uart0_line_buf_len = 0;
		
		uint16_t rec_val;		//received value
		char rec_c;				//received character
		
		rec_val = uart0_getc();
     3d2:	0e 94 ce 02 	call	0x59c	; 0x59c <uart0_getc>
     3d6:	f8 2e       	mov	r15, r24
     3d8:	d9 2e       	mov	r13, r25
		rec_c = (char)rec_val;	//lower 8 bit
		
		//Check for receive errors
		if ( uart0_errchk(rec_val) ){
     3da:	0e 94 b3 01 	call	0x366	; 0x366 <uart0_errchk>
     3de:	ec 01       	movw	r28, r24
     3e0:	89 2b       	or	r24, r25
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <uart0_getln+0x3a>
			return uart0_errchk(rec_val);
     3e4:	8f 2d       	mov	r24, r15
     3e6:	9d 2d       	mov	r25, r13
     3e8:	0e 94 b3 01 	call	0x366	; 0x366 <uart0_errchk>
     3ec:	ec 01       	movw	r28, r24
     3ee:	3d c0       	rjmp	.+122    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		}

		if ( rec_c == LINE_DELIMITER ){
     3f0:	8d e0       	ldi	r24, 0x0D	; 13
     3f2:	f8 12       	cpse	r15, r24
     3f4:	0e c0       	rjmp	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			//EOL reached
			if (uart0_line_buf_len != 0){
     3f6:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <uart0_line_buf_len.1974>
     3fa:	88 23       	and	r24, r24
     3fc:	29 f0       	breq	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				//reset buffer index
				uart0_line_buf_len = 0;
     3fe:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <uart0_line_buf_len.1974>
			else{
				//first character was a delimiter -> set terminator to first buffer index
				//(empty string)
				uart0_line_buf[uart0_line_buf_len] = 0;
			}
			return 0x01;
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	31 c0       	rjmp	.+98     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				uart0_line_buf_len = 0;
			}
			else{
				//first character was a delimiter -> set terminator to first buffer index
				//(empty string)
				uart0_line_buf[uart0_line_buf_len] = 0;
     408:	f8 01       	movw	r30, r16
     40a:	10 82       	st	Z, r1
			}
			return 0x01;
     40c:	c1 e0       	ldi	r28, 0x01	; 1
     40e:	d0 e0       	ldi	r29, 0x00	; 0
     410:	2c c0       	rjmp	.+88     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		}
		else {
			//EOL not reached 
			
			//Handle backspace and "DEL" (=127)
			if ( rec_c == '\b' || rec_c == 127 ){
     412:	f8 e0       	ldi	r31, 0x08	; 8
     414:	ff 16       	cp	r15, r31
     416:	19 f0       	breq	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	8f e7       	ldi	r24, 0x7F	; 127
     41a:	f8 12       	cpse	r15, r24
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				//delete the most recent character
				//Prevent buf len from overflow
				if (uart0_line_buf_len > 0) uart0_line_buf_len--;
     41e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <uart0_line_buf_len.1974>
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     426:	81 50       	subi	r24, 0x01	; 1
     428:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <uart0_line_buf_len.1974>
				uart0_line_buf[uart0_line_buf_len] = 0;
     42c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <uart0_line_buf_len.1974>
     430:	f8 01       	movw	r30, r16
     432:	e8 0f       	add	r30, r24
     434:	f1 1d       	adc	r31, r1
     436:	10 82       	st	Z, r1
     438:	18 c0       	rjmp	.+48     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			}
			else if (rec_c == '\n'){
     43a:	ea e0       	ldi	r30, 0x0A	; 10
     43c:	fe 16       	cp	r15, r30
     43e:	a9 f0       	breq	.+42     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				//Ignore Characters. E.g. '\n' if the EOL is "\r\n" in case of a telnet connection
				
			}
			else {
				//-> store to buffer
				if(uart0_line_buf_len < LINE_BUF_SIZE){
     440:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <uart0_line_buf_len.1974>
     444:	80 35       	cpi	r24, 0x50	; 80
     446:	68 f4       	brcc	.+26     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
					uart0_line_buf[uart0_line_buf_len++] = rec_c;
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 0f       	add	r25, r24
     44c:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <uart0_line_buf_len.1974>
     450:	f8 01       	movw	r30, r16
     452:	e8 0f       	add	r30, r24
     454:	f1 1d       	adc	r31, r1
     456:	f0 82       	st	Z, r15
					uart0_line_buf[uart0_line_buf_len] = 0; // append the null terminator
     458:	f8 01       	movw	r30, r16
     45a:	e9 0f       	add	r30, r25
     45c:	f1 1d       	adc	r31, r1
     45e:	10 82       	st	Z, r1
     460:	04 c0       	rjmp	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				}
				else{
					//buffer full -> print error message
					uart0_puts("Line length exceeds buffer!");
     462:	89 e7       	ldi	r24, 0x79	; 121
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 07 03 	call	0x60e	; 0x60e <uart0_puts>
				}
			}
		}
	}
	return 0x00;
}
     46a:	ce 01       	movw	r24, r28
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	08 95       	ret

0000047c <main>:
					
int main(void)
{

	
	sei();
     47c:	78 94       	sei

		
	uart0_init(UART_BAUD_SELECT(9600, F_CPU));
     47e:	8d e4       	ldi	r24, 0x4D	; 77
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 b3 02 	call	0x566	; 0x566 <uart0_init>
	uart1_init(UART_BAUD_SELECT(9600, F_CPU));
     486:	8d e4       	ldi	r24, 0x4D	; 77
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 85 03 	call	0x70a	; 0x70a <uart1_init>
		
	}*/
	
	while (1)
	{
		if (uart0_getln(uart0_line_buf)){
     48e:	83 ea       	ldi	r24, 0xA3	; 163
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	0e 94 db 01 	call	0x3b6	; 0x3b6 <uart0_getln>
     496:	89 2b       	or	r24, r25
     498:	d1 f3       	breq	.-12     	; 0x48e <main+0x12>
			cmd_parser(uart0_line_buf);
     49a:	83 ea       	ldi	r24, 0xA3	; 163
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <cmd_parser>
     4a2:	f5 cf       	rjmp	.-22     	; 0x48e <main+0x12>

000004a4 <__vector_18>:
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    __asm__ volatile ("" ::: "memory");
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	2f 93       	push	r18
     4b0:	3f 93       	push	r19
     4b2:	4f 93       	push	r20
     4b4:	5f 93       	push	r21
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
     4be:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     4c2:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     4c6:	28 71       	andi	r18, 0x18	; 24
     4c8:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <UART_RxHead>
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	8f 77       	andi	r24, 0x7F	; 127
     4d2:	99 27       	eor	r25, r25
     4d4:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <UART_RxTail>
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	84 17       	cp	r24, r20
     4dc:	95 07       	cpc	r25, r21
     4de:	39 f0       	breq	.+14     	; 0x4ee <__vector_18+0x4a>
     4e0:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <UART_RxHead>
     4e4:	fc 01       	movw	r30, r24
     4e6:	ed 55       	subi	r30, 0x5D	; 93
     4e8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ea:	30 83       	st	Z, r19
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__vector_18+0x4c>
     4ee:	22 e0       	ldi	r18, 0x02	; 2
     4f0:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <UART_LastRxError>
     4f4:	ff 91       	pop	r31
     4f6:	ef 91       	pop	r30
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <__vector_19>:
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
     520:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <UART_TxHead>
     524:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <UART_TxTail>
     528:	98 17       	cp	r25, r24
     52a:	79 f0       	breq	.+30     	; 0x54a <__vector_19+0x3c>
     52c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <UART_TxTail>
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	8f 77       	andi	r24, 0x7F	; 127
     536:	99 27       	eor	r25, r25
     538:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <UART_TxTail>
     53c:	fc 01       	movw	r30, r24
     53e:	ed 5d       	subi	r30, 0xDD	; 221
     540:	fb 4f       	sbci	r31, 0xFB	; 251
     542:	80 81       	ld	r24, Z
     544:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     548:	05 c0       	rjmp	.+10     	; 0x554 <__vector_19+0x46>
     54a:	e1 ec       	ldi	r30, 0xC1	; 193
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8f 7d       	andi	r24, 0xDF	; 223
     552:	80 83       	st	Z, r24
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <uart0_init>:
     566:	f8 94       	cli
     568:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <UART_TxHead>
     56c:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <UART_TxTail>
     570:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <UART_RxHead>
     574:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <UART_RxTail>
     578:	78 94       	sei
     57a:	99 23       	and	r25, r25
     57c:	24 f4       	brge	.+8      	; 0x586 <uart0_init+0x20>
     57e:	22 e0       	ldi	r18, 0x02	; 2
     580:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     584:	9f 77       	andi	r25, 0x7F	; 127
     586:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     58a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     58e:	88 e9       	ldi	r24, 0x98	; 152
     590:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     59a:	08 95       	ret

0000059c <uart0_getc>:
     59c:	f8 94       	cli
     59e:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <UART_RxHead>
     5a2:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <UART_RxTail>
     5a6:	98 13       	cpse	r25, r24
     5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <uart0_getc+0x16>
     5aa:	78 94       	sei
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	08 95       	ret
     5b2:	78 94       	sei
     5b4:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <UART_RxTail>
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	8f 77       	andi	r24, 0x7F	; 127
     5be:	99 27       	eor	r25, r25
     5c0:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <UART_RxTail>
     5c4:	fc 01       	movw	r30, r24
     5c6:	ed 55       	subi	r30, 0x5D	; 93
     5c8:	fc 4f       	sbci	r31, 0xFC	; 252
     5ca:	20 81       	ld	r18, Z
     5cc:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <UART_LastRxError>
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	98 2f       	mov	r25, r24
     5d4:	88 27       	eor	r24, r24
     5d6:	82 0f       	add	r24, r18
     5d8:	91 1d       	adc	r25, r1
     5da:	08 95       	ret

000005dc <uart0_putc>:
     5dc:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <UART_TxHead>
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	4f 5f       	subi	r20, 0xFF	; 255
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	4f 77       	andi	r20, 0x7F	; 127
     5e8:	55 27       	eor	r21, r21
     5ea:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <UART_TxTail>
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	42 17       	cp	r20, r18
     5f2:	53 07       	cpc	r21, r19
     5f4:	d1 f3       	breq	.-12     	; 0x5ea <uart0_putc+0xe>
     5f6:	fa 01       	movw	r30, r20
     5f8:	ed 5d       	subi	r30, 0xDD	; 221
     5fa:	fb 4f       	sbci	r31, 0xFB	; 251
     5fc:	80 83       	st	Z, r24
     5fe:	40 93 a2 03 	sts	0x03A2, r20	; 0x8003a2 <UART_TxHead>
     602:	e1 ec       	ldi	r30, 0xC1	; 193
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	80 62       	ori	r24, 0x20	; 32
     60a:	80 83       	st	Z, r24
     60c:	08 95       	ret

0000060e <uart0_puts>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
     614:	88 81       	ld	r24, Y
     616:	88 23       	and	r24, r24
     618:	31 f0       	breq	.+12     	; 0x626 <uart0_puts+0x18>
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <uart0_putc>
     620:	89 91       	ld	r24, Y+
     622:	81 11       	cpse	r24, r1
     624:	fb cf       	rjmp	.-10     	; 0x61c <uart0_puts+0xe>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <uart0_available>:
     62c:	f8 94       	cli
     62e:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <UART_RxHead>
     632:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <UART_RxTail>
     636:	78 94       	sei
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	80 58       	subi	r24, 0x80	; 128
     63c:	9f 4f       	sbci	r25, 0xFF	; 255
     63e:	82 1b       	sub	r24, r18
     640:	91 09       	sbc	r25, r1
     642:	8f 77       	andi	r24, 0x7F	; 127
     644:	99 27       	eor	r25, r25
     646:	08 95       	ret

00000648 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
     662:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UART1_DATA;
     666:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     66a:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
     66c:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <UART1_RxHead>
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	8f 77       	andi	r24, 0x7F	; 127
     676:	99 27       	eor	r25, r25

	if (tmphead == UART1_RxTail) {
     678:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <UART1_RxTail>
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	84 17       	cp	r24, r20
     680:	95 07       	cpc	r25, r21
     682:	39 f0       	breq	.+14     	; 0x692 <__vector_28+0x4a>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
     684:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
     688:	fc 01       	movw	r30, r24
     68a:	e2 56       	subi	r30, 0x62	; 98
     68c:	fd 4f       	sbci	r31, 0xFD	; 253
     68e:	30 83       	st	Z, r19
     690:	01 c0       	rjmp	.+2      	; 0x694 <__vector_28+0x4c>
	/* calculate buffer index */
	tmphead = (UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if (tmphead == UART1_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
     692:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
     694:	20 93 99 02 	sts	0x0299, r18	; 0x800299 <UART1_LastRxError>
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	9f 91       	pop	r25
     69e:	8f 91       	pop	r24
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	uint16_t tmptail;

	if (UART1_TxHead != UART1_TxTail) {
     6c4:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <UART1_TxHead>
     6c8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <UART1_TxTail>
     6cc:	98 17       	cp	r25, r24
     6ce:	79 f0       	breq	.+30     	; 0x6ee <__vector_29+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
     6d0:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <UART1_TxTail>
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	8f 77       	andi	r24, 0x7F	; 127
     6da:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
     6dc:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <UART1_TxTail>
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
     6e0:	fc 01       	movw	r30, r24
     6e2:	e2 5e       	subi	r30, 0xE2	; 226
     6e4:	fc 4f       	sbci	r31, 0xFC	; 252
     6e6:	80 81       	ld	r24, Z
     6e8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <__vector_29+0x46>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     6ee:	e9 ec       	ldi	r30, 0xC9	; 201
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	8f 7d       	andi	r24, 0xDF	; 223
     6f6:	80 83       	st	Z, r24
	}
}
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <uart1_init>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     70a:	f8 94       	cli
Returns:  none
**************************************************************************/
void uart1_init(uint16_t baudrate)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {	
		UART1_TxHead = 0;
     70c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <UART1_TxHead>
		UART1_TxTail = 0;
     710:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <UART1_TxTail>
		UART1_RxHead = 0;
     714:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <UART1_RxHead>
		UART1_RxTail = 0;
     718:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <UART1_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     71c:	78 94       	sei
	}

	/* Set baud rate */
	if (baudrate & 0x8000) {
     71e:	99 23       	and	r25, r25
     720:	24 f4       	brge	.+8      	; 0x72a <uart1_init+0x20>
		UART1_STATUS = (1<<U2X1);  //Enable 2x speed
     722:	22 e0       	ldi	r18, 0x02	; 2
     724:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		baudrate &= ~0x8000;
     728:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR1H = (uint8_t) (baudrate>>8);
     72a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t) baudrate;
     72e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     732:	88 e9       	ldi	r24, 0x98	; 152
     734:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	#ifdef URSEL1
		UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
	#else
		UCSR1C = (3<<UCSZ10);
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     73e:	08 95       	ret

00000740 <malloc>:
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	91 05       	cpc	r25, r1
     74c:	10 f4       	brcc	.+4      	; 0x752 <malloc+0x12>
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <__flp>
     756:	f0 91 f6 04 	lds	r31, 0x04F6	; 0x8004f6 <__flp+0x1>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	30 97       	sbiw	r30, 0x00	; 0
     764:	19 f1       	breq	.+70     	; 0x7ac <malloc+0x6c>
     766:	40 81       	ld	r20, Z
     768:	51 81       	ldd	r21, Z+1	; 0x01
     76a:	02 81       	ldd	r16, Z+2	; 0x02
     76c:	13 81       	ldd	r17, Z+3	; 0x03
     76e:	48 17       	cp	r20, r24
     770:	59 07       	cpc	r21, r25
     772:	c8 f0       	brcs	.+50     	; 0x7a6 <malloc+0x66>
     774:	84 17       	cp	r24, r20
     776:	95 07       	cpc	r25, r21
     778:	69 f4       	brne	.+26     	; 0x794 <malloc+0x54>
     77a:	10 97       	sbiw	r26, 0x00	; 0
     77c:	31 f0       	breq	.+12     	; 0x78a <malloc+0x4a>
     77e:	12 96       	adiw	r26, 0x02	; 2
     780:	0c 93       	st	X, r16
     782:	12 97       	sbiw	r26, 0x02	; 2
     784:	13 96       	adiw	r26, 0x03	; 3
     786:	1c 93       	st	X, r17
     788:	27 c0       	rjmp	.+78     	; 0x7d8 <malloc+0x98>
     78a:	00 93 f5 04 	sts	0x04F5, r16	; 0x8004f5 <__flp>
     78e:	10 93 f6 04 	sts	0x04F6, r17	; 0x8004f6 <__flp+0x1>
     792:	22 c0       	rjmp	.+68     	; 0x7d8 <malloc+0x98>
     794:	21 15       	cp	r18, r1
     796:	31 05       	cpc	r19, r1
     798:	19 f0       	breq	.+6      	; 0x7a0 <malloc+0x60>
     79a:	42 17       	cp	r20, r18
     79c:	53 07       	cpc	r21, r19
     79e:	18 f4       	brcc	.+6      	; 0x7a6 <malloc+0x66>
     7a0:	9a 01       	movw	r18, r20
     7a2:	bd 01       	movw	r22, r26
     7a4:	ef 01       	movw	r28, r30
     7a6:	df 01       	movw	r26, r30
     7a8:	f8 01       	movw	r30, r16
     7aa:	db cf       	rjmp	.-74     	; 0x762 <malloc+0x22>
     7ac:	21 15       	cp	r18, r1
     7ae:	31 05       	cpc	r19, r1
     7b0:	f9 f0       	breq	.+62     	; 0x7f0 <malloc+0xb0>
     7b2:	28 1b       	sub	r18, r24
     7b4:	39 0b       	sbc	r19, r25
     7b6:	24 30       	cpi	r18, 0x04	; 4
     7b8:	31 05       	cpc	r19, r1
     7ba:	80 f4       	brcc	.+32     	; 0x7dc <malloc+0x9c>
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	21 f0       	breq	.+8      	; 0x7ce <malloc+0x8e>
     7c6:	fb 01       	movw	r30, r22
     7c8:	93 83       	std	Z+3, r25	; 0x03
     7ca:	82 83       	std	Z+2, r24	; 0x02
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <malloc+0x96>
     7ce:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <__flp+0x1>
     7d2:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <__flp>
     7d6:	fe 01       	movw	r30, r28
     7d8:	32 96       	adiw	r30, 0x02	; 2
     7da:	44 c0       	rjmp	.+136    	; 0x864 <malloc+0x124>
     7dc:	fe 01       	movw	r30, r28
     7de:	e2 0f       	add	r30, r18
     7e0:	f3 1f       	adc	r31, r19
     7e2:	81 93       	st	Z+, r24
     7e4:	91 93       	st	Z+, r25
     7e6:	22 50       	subi	r18, 0x02	; 2
     7e8:	31 09       	sbc	r19, r1
     7ea:	39 83       	std	Y+1, r19	; 0x01
     7ec:	28 83       	st	Y, r18
     7ee:	3a c0       	rjmp	.+116    	; 0x864 <malloc+0x124>
     7f0:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <__brkval>
     7f4:	30 91 f4 04 	lds	r19, 0x04F4	; 0x8004f4 <__brkval+0x1>
     7f8:	23 2b       	or	r18, r19
     7fa:	41 f4       	brne	.+16     	; 0x80c <malloc+0xcc>
     7fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     800:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     804:	30 93 f4 04 	sts	0x04F4, r19	; 0x8004f4 <__brkval+0x1>
     808:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <__brkval>
     80c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     810:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     814:	21 15       	cp	r18, r1
     816:	31 05       	cpc	r19, r1
     818:	41 f4       	brne	.+16     	; 0x82a <malloc+0xea>
     81a:	2d b7       	in	r18, 0x3d	; 61
     81c:	3e b7       	in	r19, 0x3e	; 62
     81e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     822:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     826:	24 1b       	sub	r18, r20
     828:	35 0b       	sbc	r19, r21
     82a:	e0 91 f3 04 	lds	r30, 0x04F3	; 0x8004f3 <__brkval>
     82e:	f0 91 f4 04 	lds	r31, 0x04F4	; 0x8004f4 <__brkval+0x1>
     832:	e2 17       	cp	r30, r18
     834:	f3 07       	cpc	r31, r19
     836:	a0 f4       	brcc	.+40     	; 0x860 <malloc+0x120>
     838:	2e 1b       	sub	r18, r30
     83a:	3f 0b       	sbc	r19, r31
     83c:	28 17       	cp	r18, r24
     83e:	39 07       	cpc	r19, r25
     840:	78 f0       	brcs	.+30     	; 0x860 <malloc+0x120>
     842:	ac 01       	movw	r20, r24
     844:	4e 5f       	subi	r20, 0xFE	; 254
     846:	5f 4f       	sbci	r21, 0xFF	; 255
     848:	24 17       	cp	r18, r20
     84a:	35 07       	cpc	r19, r21
     84c:	48 f0       	brcs	.+18     	; 0x860 <malloc+0x120>
     84e:	4e 0f       	add	r20, r30
     850:	5f 1f       	adc	r21, r31
     852:	50 93 f4 04 	sts	0x04F4, r21	; 0x8004f4 <__brkval+0x1>
     856:	40 93 f3 04 	sts	0x04F3, r20	; 0x8004f3 <__brkval>
     85a:	81 93       	st	Z+, r24
     85c:	91 93       	st	Z+, r25
     85e:	02 c0       	rjmp	.+4      	; 0x864 <malloc+0x124>
     860:	e0 e0       	ldi	r30, 0x00	; 0
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	cf 01       	movw	r24, r30
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <free>:
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	09 f4       	brne	.+2      	; 0x87a <free+0xa>
     878:	81 c0       	rjmp	.+258    	; 0x97c <__stack+0x7d>
     87a:	fc 01       	movw	r30, r24
     87c:	32 97       	sbiw	r30, 0x02	; 2
     87e:	13 82       	std	Z+3, r1	; 0x03
     880:	12 82       	std	Z+2, r1	; 0x02
     882:	a0 91 f5 04 	lds	r26, 0x04F5	; 0x8004f5 <__flp>
     886:	b0 91 f6 04 	lds	r27, 0x04F6	; 0x8004f6 <__flp+0x1>
     88a:	10 97       	sbiw	r26, 0x00	; 0
     88c:	81 f4       	brne	.+32     	; 0x8ae <free+0x3e>
     88e:	20 81       	ld	r18, Z
     890:	31 81       	ldd	r19, Z+1	; 0x01
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <__brkval>
     89a:	30 91 f4 04 	lds	r19, 0x04F4	; 0x8004f4 <__brkval+0x1>
     89e:	28 17       	cp	r18, r24
     8a0:	39 07       	cpc	r19, r25
     8a2:	51 f5       	brne	.+84     	; 0x8f8 <free+0x88>
     8a4:	f0 93 f4 04 	sts	0x04F4, r31	; 0x8004f4 <__brkval+0x1>
     8a8:	e0 93 f3 04 	sts	0x04F3, r30	; 0x8004f3 <__brkval>
     8ac:	67 c0       	rjmp	.+206    	; 0x97c <__stack+0x7d>
     8ae:	ed 01       	movw	r28, r26
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	ce 17       	cp	r28, r30
     8b6:	df 07       	cpc	r29, r31
     8b8:	40 f4       	brcc	.+16     	; 0x8ca <free+0x5a>
     8ba:	4a 81       	ldd	r20, Y+2	; 0x02
     8bc:	5b 81       	ldd	r21, Y+3	; 0x03
     8be:	9e 01       	movw	r18, r28
     8c0:	41 15       	cp	r20, r1
     8c2:	51 05       	cpc	r21, r1
     8c4:	f1 f0       	breq	.+60     	; 0x902 <__stack+0x3>
     8c6:	ea 01       	movw	r28, r20
     8c8:	f5 cf       	rjmp	.-22     	; 0x8b4 <free+0x44>
     8ca:	d3 83       	std	Z+3, r29	; 0x03
     8cc:	c2 83       	std	Z+2, r28	; 0x02
     8ce:	40 81       	ld	r20, Z
     8d0:	51 81       	ldd	r21, Z+1	; 0x01
     8d2:	84 0f       	add	r24, r20
     8d4:	95 1f       	adc	r25, r21
     8d6:	c8 17       	cp	r28, r24
     8d8:	d9 07       	cpc	r29, r25
     8da:	59 f4       	brne	.+22     	; 0x8f2 <free+0x82>
     8dc:	88 81       	ld	r24, Y
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	84 0f       	add	r24, r20
     8e2:	95 1f       	adc	r25, r21
     8e4:	02 96       	adiw	r24, 0x02	; 2
     8e6:	91 83       	std	Z+1, r25	; 0x01
     8e8:	80 83       	st	Z, r24
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	9b 81       	ldd	r25, Y+3	; 0x03
     8ee:	93 83       	std	Z+3, r25	; 0x03
     8f0:	82 83       	std	Z+2, r24	; 0x02
     8f2:	21 15       	cp	r18, r1
     8f4:	31 05       	cpc	r19, r1
     8f6:	29 f4       	brne	.+10     	; 0x902 <__stack+0x3>
     8f8:	f0 93 f6 04 	sts	0x04F6, r31	; 0x8004f6 <__flp+0x1>
     8fc:	e0 93 f5 04 	sts	0x04F5, r30	; 0x8004f5 <__flp>
     900:	3d c0       	rjmp	.+122    	; 0x97c <__stack+0x7d>
     902:	e9 01       	movw	r28, r18
     904:	fb 83       	std	Y+3, r31	; 0x03
     906:	ea 83       	std	Y+2, r30	; 0x02
     908:	49 91       	ld	r20, Y+
     90a:	59 91       	ld	r21, Y+
     90c:	c4 0f       	add	r28, r20
     90e:	d5 1f       	adc	r29, r21
     910:	ec 17       	cp	r30, r28
     912:	fd 07       	cpc	r31, r29
     914:	61 f4       	brne	.+24     	; 0x92e <__stack+0x2f>
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	84 0f       	add	r24, r20
     91c:	95 1f       	adc	r25, r21
     91e:	02 96       	adiw	r24, 0x02	; 2
     920:	e9 01       	movw	r28, r18
     922:	99 83       	std	Y+1, r25	; 0x01
     924:	88 83       	st	Y, r24
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	9b 83       	std	Y+3, r25	; 0x03
     92c:	8a 83       	std	Y+2, r24	; 0x02
     92e:	e0 e0       	ldi	r30, 0x00	; 0
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	12 96       	adiw	r26, 0x02	; 2
     934:	8d 91       	ld	r24, X+
     936:	9c 91       	ld	r25, X
     938:	13 97       	sbiw	r26, 0x03	; 3
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	19 f0       	breq	.+6      	; 0x944 <__stack+0x45>
     93e:	fd 01       	movw	r30, r26
     940:	dc 01       	movw	r26, r24
     942:	f7 cf       	rjmp	.-18     	; 0x932 <__stack+0x33>
     944:	8d 91       	ld	r24, X+
     946:	9c 91       	ld	r25, X
     948:	11 97       	sbiw	r26, 0x01	; 1
     94a:	9d 01       	movw	r18, r26
     94c:	2e 5f       	subi	r18, 0xFE	; 254
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <__brkval>
     958:	30 91 f4 04 	lds	r19, 0x04F4	; 0x8004f4 <__brkval+0x1>
     95c:	28 17       	cp	r18, r24
     95e:	39 07       	cpc	r19, r25
     960:	69 f4       	brne	.+26     	; 0x97c <__stack+0x7d>
     962:	30 97       	sbiw	r30, 0x00	; 0
     964:	29 f4       	brne	.+10     	; 0x970 <__stack+0x71>
     966:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <__flp+0x1>
     96a:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <__flp>
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	12 82       	std	Z+2, r1	; 0x02
     974:	b0 93 f4 04 	sts	0x04F4, r27	; 0x8004f4 <__brkval+0x1>
     978:	a0 93 f3 04 	sts	0x04F3, r26	; 0x8004f3 <__brkval>
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <strtok>:
     982:	46 e9       	ldi	r20, 0x96	; 150
     984:	52 e0       	ldi	r21, 0x02	; 2
     986:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <strtok_r>
     98a:	08 95       	ret

0000098c <strcmp>:
     98c:	fb 01       	movw	r30, r22
     98e:	dc 01       	movw	r26, r24
     990:	8d 91       	ld	r24, X+
     992:	01 90       	ld	r0, Z+
     994:	80 19       	sub	r24, r0
     996:	01 10       	cpse	r0, r1
     998:	d9 f3       	breq	.-10     	; 0x990 <strcmp+0x4>
     99a:	99 0b       	sbc	r25, r25
     99c:	08 95       	ret

0000099e <strcpy>:
     99e:	fb 01       	movw	r30, r22
     9a0:	dc 01       	movw	r26, r24
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	00 20       	and	r0, r0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <strcpy+0x4>
     9aa:	08 95       	ret

000009ac <strlwr>:
     9ac:	dc 01       	movw	r26, r24
     9ae:	6c 91       	ld	r22, X
     9b0:	61 54       	subi	r22, 0x41	; 65
     9b2:	6a 31       	cpi	r22, 0x1A	; 26
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <strlwr+0xc>
     9b6:	60 52       	subi	r22, 0x20	; 32
     9b8:	6f 59       	subi	r22, 0x9F	; 159
     9ba:	6d 93       	st	X+, r22
     9bc:	c1 f7       	brne	.-16     	; 0x9ae <strlwr+0x2>
     9be:	08 95       	ret

000009c0 <strtok_r>:
     9c0:	fa 01       	movw	r30, r20
     9c2:	a1 91       	ld	r26, Z+
     9c4:	b0 81       	ld	r27, Z
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	19 f4       	brne	.+6      	; 0x9d0 <strtok_r+0x10>
     9ca:	10 97       	sbiw	r26, 0x00	; 0
     9cc:	e1 f0       	breq	.+56     	; 0xa06 <strtok_r+0x46>
     9ce:	cd 01       	movw	r24, r26
     9d0:	dc 01       	movw	r26, r24
     9d2:	cd 01       	movw	r24, r26
     9d4:	0d 90       	ld	r0, X+
     9d6:	00 20       	and	r0, r0
     9d8:	11 f4       	brne	.+4      	; 0x9de <strtok_r+0x1e>
     9da:	c0 01       	movw	r24, r0
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <strtok_r+0x44>
     9de:	fb 01       	movw	r30, r22
     9e0:	21 91       	ld	r18, Z+
     9e2:	22 23       	and	r18, r18
     9e4:	19 f0       	breq	.+6      	; 0x9ec <strtok_r+0x2c>
     9e6:	20 15       	cp	r18, r0
     9e8:	d9 f7       	brne	.-10     	; 0x9e0 <strtok_r+0x20>
     9ea:	f3 cf       	rjmp	.-26     	; 0x9d2 <strtok_r+0x12>
     9ec:	fb 01       	movw	r30, r22
     9ee:	21 91       	ld	r18, Z+
     9f0:	20 15       	cp	r18, r0
     9f2:	19 f4       	brne	.+6      	; 0x9fa <strtok_r+0x3a>
     9f4:	1e 92       	st	-X, r1
     9f6:	11 96       	adiw	r26, 0x01	; 1
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <strtok_r+0x46>
     9fa:	22 23       	and	r18, r18
     9fc:	c1 f7       	brne	.-16     	; 0x9ee <strtok_r+0x2e>
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	a1 f7       	brne	.-24     	; 0x9ec <strtok_r+0x2c>
     a04:	d0 01       	movw	r26, r0
     a06:	fa 01       	movw	r30, r20
     a08:	a1 93       	st	Z+, r26
     a0a:	b0 83       	st	Z, r27
     a0c:	08 95       	ret

00000a0e <__itoa_ncheck>:
     a0e:	bb 27       	eor	r27, r27
     a10:	4a 30       	cpi	r20, 0x0A	; 10
     a12:	31 f4       	brne	.+12     	; 0xa20 <__itoa_ncheck+0x12>
     a14:	99 23       	and	r25, r25
     a16:	22 f4       	brpl	.+8      	; 0xa20 <__itoa_ncheck+0x12>
     a18:	bd e2       	ldi	r27, 0x2D	; 45
     a1a:	90 95       	com	r25
     a1c:	81 95       	neg	r24
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__utoa_common>

00000a24 <__utoa_ncheck>:
     a24:	bb 27       	eor	r27, r27

00000a26 <__utoa_common>:
     a26:	fb 01       	movw	r30, r22
     a28:	55 27       	eor	r21, r21
     a2a:	aa 27       	eor	r26, r26
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	aa 1f       	adc	r26, r26
     a32:	a4 17       	cp	r26, r20
     a34:	10 f0       	brcs	.+4      	; 0xa3a <__utoa_common+0x14>
     a36:	a4 1b       	sub	r26, r20
     a38:	83 95       	inc	r24
     a3a:	50 51       	subi	r21, 0x10	; 16
     a3c:	b9 f7       	brne	.-18     	; 0xa2c <__utoa_common+0x6>
     a3e:	a0 5d       	subi	r26, 0xD0	; 208
     a40:	aa 33       	cpi	r26, 0x3A	; 58
     a42:	08 f0       	brcs	.+2      	; 0xa46 <__utoa_common+0x20>
     a44:	a9 5d       	subi	r26, 0xD9	; 217
     a46:	a1 93       	st	Z+, r26
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	79 f7       	brne	.-34     	; 0xa2a <__utoa_common+0x4>
     a4c:	b1 11       	cpse	r27, r1
     a4e:	b1 93       	st	Z+, r27
     a50:	11 92       	st	Z+, r1
     a52:	cb 01       	movw	r24, r22
     a54:	0c 94 23 07 	jmp	0xe46	; 0xe46 <strrev>

00000a58 <vfprintf>:
     a58:	ab e0       	ldi	r26, 0x0B	; 11
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e2 e3       	ldi	r30, 0x32	; 50
     a5e:	f5 e0       	ldi	r31, 0x05	; 5
     a60:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__prologue_saves__>
     a64:	6c 01       	movw	r12, r24
     a66:	7b 01       	movw	r14, r22
     a68:	8a 01       	movw	r16, r20
     a6a:	fc 01       	movw	r30, r24
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	83 81       	ldd	r24, Z+3	; 0x03
     a72:	81 ff       	sbrs	r24, 1
     a74:	cc c1       	rjmp	.+920    	; 0xe0e <vfprintf+0x3b6>
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	3c 01       	movw	r6, r24
     a7c:	f6 01       	movw	r30, r12
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	f7 01       	movw	r30, r14
     a82:	93 fd       	sbrc	r25, 3
     a84:	85 91       	lpm	r24, Z+
     a86:	93 ff       	sbrs	r25, 3
     a88:	81 91       	ld	r24, Z+
     a8a:	7f 01       	movw	r14, r30
     a8c:	88 23       	and	r24, r24
     a8e:	09 f4       	brne	.+2      	; 0xa92 <vfprintf+0x3a>
     a90:	ba c1       	rjmp	.+884    	; 0xe06 <vfprintf+0x3ae>
     a92:	85 32       	cpi	r24, 0x25	; 37
     a94:	39 f4       	brne	.+14     	; 0xaa4 <vfprintf+0x4c>
     a96:	93 fd       	sbrc	r25, 3
     a98:	85 91       	lpm	r24, Z+
     a9a:	93 ff       	sbrs	r25, 3
     a9c:	81 91       	ld	r24, Z+
     a9e:	7f 01       	movw	r14, r30
     aa0:	85 32       	cpi	r24, 0x25	; 37
     aa2:	29 f4       	brne	.+10     	; 0xaae <vfprintf+0x56>
     aa4:	b6 01       	movw	r22, r12
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     aac:	e7 cf       	rjmp	.-50     	; 0xa7c <vfprintf+0x24>
     aae:	91 2c       	mov	r9, r1
     ab0:	21 2c       	mov	r2, r1
     ab2:	31 2c       	mov	r3, r1
     ab4:	ff e1       	ldi	r31, 0x1F	; 31
     ab6:	f3 15       	cp	r31, r3
     ab8:	d8 f0       	brcs	.+54     	; 0xaf0 <vfprintf+0x98>
     aba:	8b 32       	cpi	r24, 0x2B	; 43
     abc:	79 f0       	breq	.+30     	; 0xadc <vfprintf+0x84>
     abe:	38 f4       	brcc	.+14     	; 0xace <vfprintf+0x76>
     ac0:	80 32       	cpi	r24, 0x20	; 32
     ac2:	79 f0       	breq	.+30     	; 0xae2 <vfprintf+0x8a>
     ac4:	83 32       	cpi	r24, 0x23	; 35
     ac6:	a1 f4       	brne	.+40     	; 0xaf0 <vfprintf+0x98>
     ac8:	23 2d       	mov	r18, r3
     aca:	20 61       	ori	r18, 0x10	; 16
     acc:	1d c0       	rjmp	.+58     	; 0xb08 <vfprintf+0xb0>
     ace:	8d 32       	cpi	r24, 0x2D	; 45
     ad0:	61 f0       	breq	.+24     	; 0xaea <vfprintf+0x92>
     ad2:	80 33       	cpi	r24, 0x30	; 48
     ad4:	69 f4       	brne	.+26     	; 0xaf0 <vfprintf+0x98>
     ad6:	23 2d       	mov	r18, r3
     ad8:	21 60       	ori	r18, 0x01	; 1
     ada:	16 c0       	rjmp	.+44     	; 0xb08 <vfprintf+0xb0>
     adc:	83 2d       	mov	r24, r3
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	38 2e       	mov	r3, r24
     ae2:	e3 2d       	mov	r30, r3
     ae4:	e4 60       	ori	r30, 0x04	; 4
     ae6:	3e 2e       	mov	r3, r30
     ae8:	2a c0       	rjmp	.+84     	; 0xb3e <vfprintf+0xe6>
     aea:	f3 2d       	mov	r31, r3
     aec:	f8 60       	ori	r31, 0x08	; 8
     aee:	1d c0       	rjmp	.+58     	; 0xb2a <vfprintf+0xd2>
     af0:	37 fc       	sbrc	r3, 7
     af2:	2d c0       	rjmp	.+90     	; 0xb4e <vfprintf+0xf6>
     af4:	20 ed       	ldi	r18, 0xD0	; 208
     af6:	28 0f       	add	r18, r24
     af8:	2a 30       	cpi	r18, 0x0A	; 10
     afa:	40 f0       	brcs	.+16     	; 0xb0c <vfprintf+0xb4>
     afc:	8e 32       	cpi	r24, 0x2E	; 46
     afe:	b9 f4       	brne	.+46     	; 0xb2e <vfprintf+0xd6>
     b00:	36 fc       	sbrc	r3, 6
     b02:	81 c1       	rjmp	.+770    	; 0xe06 <vfprintf+0x3ae>
     b04:	23 2d       	mov	r18, r3
     b06:	20 64       	ori	r18, 0x40	; 64
     b08:	32 2e       	mov	r3, r18
     b0a:	19 c0       	rjmp	.+50     	; 0xb3e <vfprintf+0xe6>
     b0c:	36 fe       	sbrs	r3, 6
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <vfprintf+0xc4>
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	98 9e       	mul	r9, r24
     b14:	20 0d       	add	r18, r0
     b16:	11 24       	eor	r1, r1
     b18:	92 2e       	mov	r9, r18
     b1a:	11 c0       	rjmp	.+34     	; 0xb3e <vfprintf+0xe6>
     b1c:	ea e0       	ldi	r30, 0x0A	; 10
     b1e:	2e 9e       	mul	r2, r30
     b20:	20 0d       	add	r18, r0
     b22:	11 24       	eor	r1, r1
     b24:	22 2e       	mov	r2, r18
     b26:	f3 2d       	mov	r31, r3
     b28:	f0 62       	ori	r31, 0x20	; 32
     b2a:	3f 2e       	mov	r3, r31
     b2c:	08 c0       	rjmp	.+16     	; 0xb3e <vfprintf+0xe6>
     b2e:	8c 36       	cpi	r24, 0x6C	; 108
     b30:	21 f4       	brne	.+8      	; 0xb3a <vfprintf+0xe2>
     b32:	83 2d       	mov	r24, r3
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	38 2e       	mov	r3, r24
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0xe6>
     b3a:	88 36       	cpi	r24, 0x68	; 104
     b3c:	41 f4       	brne	.+16     	; 0xb4e <vfprintf+0xf6>
     b3e:	f7 01       	movw	r30, r14
     b40:	93 fd       	sbrc	r25, 3
     b42:	85 91       	lpm	r24, Z+
     b44:	93 ff       	sbrs	r25, 3
     b46:	81 91       	ld	r24, Z+
     b48:	7f 01       	movw	r14, r30
     b4a:	81 11       	cpse	r24, r1
     b4c:	b3 cf       	rjmp	.-154    	; 0xab4 <vfprintf+0x5c>
     b4e:	98 2f       	mov	r25, r24
     b50:	9f 7d       	andi	r25, 0xDF	; 223
     b52:	95 54       	subi	r25, 0x45	; 69
     b54:	93 30       	cpi	r25, 0x03	; 3
     b56:	28 f4       	brcc	.+10     	; 0xb62 <vfprintf+0x10a>
     b58:	0c 5f       	subi	r16, 0xFC	; 252
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	9f e3       	ldi	r25, 0x3F	; 63
     b5e:	99 83       	std	Y+1, r25	; 0x01
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x124>
     b62:	83 36       	cpi	r24, 0x63	; 99
     b64:	31 f0       	breq	.+12     	; 0xb72 <vfprintf+0x11a>
     b66:	83 37       	cpi	r24, 0x73	; 115
     b68:	71 f0       	breq	.+28     	; 0xb86 <vfprintf+0x12e>
     b6a:	83 35       	cpi	r24, 0x53	; 83
     b6c:	09 f0       	breq	.+2      	; 0xb70 <vfprintf+0x118>
     b6e:	59 c0       	rjmp	.+178    	; 0xc22 <vfprintf+0x1ca>
     b70:	21 c0       	rjmp	.+66     	; 0xbb4 <vfprintf+0x15c>
     b72:	f8 01       	movw	r30, r16
     b74:	80 81       	ld	r24, Z
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	0e 5f       	subi	r16, 0xFE	; 254
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	88 24       	eor	r8, r8
     b7e:	83 94       	inc	r8
     b80:	91 2c       	mov	r9, r1
     b82:	53 01       	movw	r10, r6
     b84:	13 c0       	rjmp	.+38     	; 0xbac <vfprintf+0x154>
     b86:	28 01       	movw	r4, r16
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	4f 0e       	add	r4, r31
     b8c:	51 1c       	adc	r5, r1
     b8e:	f8 01       	movw	r30, r16
     b90:	a0 80       	ld	r10, Z
     b92:	b1 80       	ldd	r11, Z+1	; 0x01
     b94:	36 fe       	sbrs	r3, 6
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <vfprintf+0x146>
     b98:	69 2d       	mov	r22, r9
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0x14a>
     b9e:	6f ef       	ldi	r22, 0xFF	; 255
     ba0:	7f ef       	ldi	r23, 0xFF	; 255
     ba2:	c5 01       	movw	r24, r10
     ba4:	0e 94 18 07 	call	0xe30	; 0xe30 <strnlen>
     ba8:	4c 01       	movw	r8, r24
     baa:	82 01       	movw	r16, r4
     bac:	f3 2d       	mov	r31, r3
     bae:	ff 77       	andi	r31, 0x7F	; 127
     bb0:	3f 2e       	mov	r3, r31
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <vfprintf+0x188>
     bb4:	28 01       	movw	r4, r16
     bb6:	22 e0       	ldi	r18, 0x02	; 2
     bb8:	42 0e       	add	r4, r18
     bba:	51 1c       	adc	r5, r1
     bbc:	f8 01       	movw	r30, r16
     bbe:	a0 80       	ld	r10, Z
     bc0:	b1 80       	ldd	r11, Z+1	; 0x01
     bc2:	36 fe       	sbrs	r3, 6
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <vfprintf+0x174>
     bc6:	69 2d       	mov	r22, r9
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x178>
     bcc:	6f ef       	ldi	r22, 0xFF	; 255
     bce:	7f ef       	ldi	r23, 0xFF	; 255
     bd0:	c5 01       	movw	r24, r10
     bd2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <strnlen_P>
     bd6:	4c 01       	movw	r8, r24
     bd8:	f3 2d       	mov	r31, r3
     bda:	f0 68       	ori	r31, 0x80	; 128
     bdc:	3f 2e       	mov	r3, r31
     bde:	82 01       	movw	r16, r4
     be0:	33 fc       	sbrc	r3, 3
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <vfprintf+0x1c2>
     be4:	82 2d       	mov	r24, r2
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	88 16       	cp	r8, r24
     bea:	99 06       	cpc	r9, r25
     bec:	b0 f4       	brcc	.+44     	; 0xc1a <vfprintf+0x1c2>
     bee:	b6 01       	movw	r22, r12
     bf0:	80 e2       	ldi	r24, 0x20	; 32
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     bf8:	2a 94       	dec	r2
     bfa:	f4 cf       	rjmp	.-24     	; 0xbe4 <vfprintf+0x18c>
     bfc:	f5 01       	movw	r30, r10
     bfe:	37 fc       	sbrc	r3, 7
     c00:	85 91       	lpm	r24, Z+
     c02:	37 fe       	sbrs	r3, 7
     c04:	81 91       	ld	r24, Z+
     c06:	5f 01       	movw	r10, r30
     c08:	b6 01       	movw	r22, r12
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     c10:	21 10       	cpse	r2, r1
     c12:	2a 94       	dec	r2
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	82 1a       	sub	r8, r18
     c18:	91 08       	sbc	r9, r1
     c1a:	81 14       	cp	r8, r1
     c1c:	91 04       	cpc	r9, r1
     c1e:	71 f7       	brne	.-36     	; 0xbfc <vfprintf+0x1a4>
     c20:	e8 c0       	rjmp	.+464    	; 0xdf2 <vfprintf+0x39a>
     c22:	84 36       	cpi	r24, 0x64	; 100
     c24:	11 f0       	breq	.+4      	; 0xc2a <vfprintf+0x1d2>
     c26:	89 36       	cpi	r24, 0x69	; 105
     c28:	41 f5       	brne	.+80     	; 0xc7a <vfprintf+0x222>
     c2a:	f8 01       	movw	r30, r16
     c2c:	37 fe       	sbrs	r3, 7
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <vfprintf+0x1e6>
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	82 81       	ldd	r24, Z+2	; 0x02
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	0c 5f       	subi	r16, 0xFC	; 252
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0x1f6>
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	07 2e       	mov	r0, r23
     c44:	00 0c       	add	r0, r0
     c46:	88 0b       	sbc	r24, r24
     c48:	99 0b       	sbc	r25, r25
     c4a:	0e 5f       	subi	r16, 0xFE	; 254
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	f3 2d       	mov	r31, r3
     c50:	ff 76       	andi	r31, 0x6F	; 111
     c52:	3f 2e       	mov	r3, r31
     c54:	97 ff       	sbrs	r25, 7
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <vfprintf+0x212>
     c58:	90 95       	com	r25
     c5a:	80 95       	com	r24
     c5c:	70 95       	com	r23
     c5e:	61 95       	neg	r22
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	8f 4f       	sbci	r24, 0xFF	; 255
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	f0 68       	ori	r31, 0x80	; 128
     c68:	3f 2e       	mov	r3, r31
     c6a:	2a e0       	ldi	r18, 0x0A	; 10
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	a3 01       	movw	r20, r6
     c70:	0e 94 6f 07 	call	0xede	; 0xede <__ultoa_invert>
     c74:	88 2e       	mov	r8, r24
     c76:	86 18       	sub	r8, r6
     c78:	45 c0       	rjmp	.+138    	; 0xd04 <vfprintf+0x2ac>
     c7a:	85 37       	cpi	r24, 0x75	; 117
     c7c:	31 f4       	brne	.+12     	; 0xc8a <vfprintf+0x232>
     c7e:	23 2d       	mov	r18, r3
     c80:	2f 7e       	andi	r18, 0xEF	; 239
     c82:	b2 2e       	mov	r11, r18
     c84:	2a e0       	ldi	r18, 0x0A	; 10
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	25 c0       	rjmp	.+74     	; 0xcd4 <vfprintf+0x27c>
     c8a:	93 2d       	mov	r25, r3
     c8c:	99 7f       	andi	r25, 0xF9	; 249
     c8e:	b9 2e       	mov	r11, r25
     c90:	8f 36       	cpi	r24, 0x6F	; 111
     c92:	c1 f0       	breq	.+48     	; 0xcc4 <vfprintf+0x26c>
     c94:	18 f4       	brcc	.+6      	; 0xc9c <vfprintf+0x244>
     c96:	88 35       	cpi	r24, 0x58	; 88
     c98:	79 f0       	breq	.+30     	; 0xcb8 <vfprintf+0x260>
     c9a:	b5 c0       	rjmp	.+362    	; 0xe06 <vfprintf+0x3ae>
     c9c:	80 37       	cpi	r24, 0x70	; 112
     c9e:	19 f0       	breq	.+6      	; 0xca6 <vfprintf+0x24e>
     ca0:	88 37       	cpi	r24, 0x78	; 120
     ca2:	21 f0       	breq	.+8      	; 0xcac <vfprintf+0x254>
     ca4:	b0 c0       	rjmp	.+352    	; 0xe06 <vfprintf+0x3ae>
     ca6:	e9 2f       	mov	r30, r25
     ca8:	e0 61       	ori	r30, 0x10	; 16
     caa:	be 2e       	mov	r11, r30
     cac:	b4 fe       	sbrs	r11, 4
     cae:	0d c0       	rjmp	.+26     	; 0xcca <vfprintf+0x272>
     cb0:	fb 2d       	mov	r31, r11
     cb2:	f4 60       	ori	r31, 0x04	; 4
     cb4:	bf 2e       	mov	r11, r31
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <vfprintf+0x272>
     cb8:	34 fe       	sbrs	r3, 4
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <vfprintf+0x278>
     cbc:	29 2f       	mov	r18, r25
     cbe:	26 60       	ori	r18, 0x06	; 6
     cc0:	b2 2e       	mov	r11, r18
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <vfprintf+0x278>
     cc4:	28 e0       	ldi	r18, 0x08	; 8
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <vfprintf+0x27c>
     cca:	20 e1       	ldi	r18, 0x10	; 16
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x27c>
     cd0:	20 e1       	ldi	r18, 0x10	; 16
     cd2:	32 e0       	ldi	r19, 0x02	; 2
     cd4:	f8 01       	movw	r30, r16
     cd6:	b7 fe       	sbrs	r11, 7
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <vfprintf+0x290>
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	0c 5f       	subi	r16, 0xFC	; 252
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <vfprintf+0x29c>
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 5f       	subi	r16, 0xFE	; 254
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	a3 01       	movw	r20, r6
     cf6:	0e 94 6f 07 	call	0xede	; 0xede <__ultoa_invert>
     cfa:	88 2e       	mov	r8, r24
     cfc:	86 18       	sub	r8, r6
     cfe:	fb 2d       	mov	r31, r11
     d00:	ff 77       	andi	r31, 0x7F	; 127
     d02:	3f 2e       	mov	r3, r31
     d04:	36 fe       	sbrs	r3, 6
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <vfprintf+0x2ca>
     d08:	23 2d       	mov	r18, r3
     d0a:	2e 7f       	andi	r18, 0xFE	; 254
     d0c:	a2 2e       	mov	r10, r18
     d0e:	89 14       	cp	r8, r9
     d10:	58 f4       	brcc	.+22     	; 0xd28 <vfprintf+0x2d0>
     d12:	34 fe       	sbrs	r3, 4
     d14:	0b c0       	rjmp	.+22     	; 0xd2c <vfprintf+0x2d4>
     d16:	32 fc       	sbrc	r3, 2
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <vfprintf+0x2d4>
     d1a:	83 2d       	mov	r24, r3
     d1c:	8e 7e       	andi	r24, 0xEE	; 238
     d1e:	a8 2e       	mov	r10, r24
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <vfprintf+0x2d4>
     d22:	b8 2c       	mov	r11, r8
     d24:	a3 2c       	mov	r10, r3
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <vfprintf+0x2d6>
     d28:	b8 2c       	mov	r11, r8
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <vfprintf+0x2d6>
     d2c:	b9 2c       	mov	r11, r9
     d2e:	a4 fe       	sbrs	r10, 4
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <vfprintf+0x2f8>
     d32:	fe 01       	movw	r30, r28
     d34:	e8 0d       	add	r30, r8
     d36:	f1 1d       	adc	r31, r1
     d38:	80 81       	ld	r24, Z
     d3a:	80 33       	cpi	r24, 0x30	; 48
     d3c:	21 f4       	brne	.+8      	; 0xd46 <vfprintf+0x2ee>
     d3e:	9a 2d       	mov	r25, r10
     d40:	99 7e       	andi	r25, 0xE9	; 233
     d42:	a9 2e       	mov	r10, r25
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <vfprintf+0x300>
     d46:	a2 fe       	sbrs	r10, 2
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <vfprintf+0x2fe>
     d4a:	b3 94       	inc	r11
     d4c:	b3 94       	inc	r11
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <vfprintf+0x300>
     d50:	8a 2d       	mov	r24, r10
     d52:	86 78       	andi	r24, 0x86	; 134
     d54:	09 f0       	breq	.+2      	; 0xd58 <vfprintf+0x300>
     d56:	b3 94       	inc	r11
     d58:	a3 fc       	sbrc	r10, 3
     d5a:	11 c0       	rjmp	.+34     	; 0xd7e <vfprintf+0x326>
     d5c:	a0 fe       	sbrs	r10, 0
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <vfprintf+0x314>
     d60:	b2 14       	cp	r11, r2
     d62:	88 f4       	brcc	.+34     	; 0xd86 <vfprintf+0x32e>
     d64:	28 0c       	add	r2, r8
     d66:	92 2c       	mov	r9, r2
     d68:	9b 18       	sub	r9, r11
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <vfprintf+0x330>
     d6c:	b2 14       	cp	r11, r2
     d6e:	60 f4       	brcc	.+24     	; 0xd88 <vfprintf+0x330>
     d70:	b6 01       	movw	r22, r12
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     d7a:	b3 94       	inc	r11
     d7c:	f7 cf       	rjmp	.-18     	; 0xd6c <vfprintf+0x314>
     d7e:	b2 14       	cp	r11, r2
     d80:	18 f4       	brcc	.+6      	; 0xd88 <vfprintf+0x330>
     d82:	2b 18       	sub	r2, r11
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x332>
     d86:	98 2c       	mov	r9, r8
     d88:	21 2c       	mov	r2, r1
     d8a:	a4 fe       	sbrs	r10, 4
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <vfprintf+0x356>
     d8e:	b6 01       	movw	r22, r12
     d90:	80 e3       	ldi	r24, 0x30	; 48
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     d98:	a2 fe       	sbrs	r10, 2
     d9a:	17 c0       	rjmp	.+46     	; 0xdca <vfprintf+0x372>
     d9c:	a1 fc       	sbrc	r10, 1
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <vfprintf+0x34e>
     da0:	88 e7       	ldi	r24, 0x78	; 120
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x352>
     da6:	88 e5       	ldi	r24, 0x58	; 88
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	b6 01       	movw	r22, r12
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <vfprintf+0x36e>
     dae:	8a 2d       	mov	r24, r10
     db0:	86 78       	andi	r24, 0x86	; 134
     db2:	59 f0       	breq	.+22     	; 0xdca <vfprintf+0x372>
     db4:	a1 fe       	sbrs	r10, 1
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x364>
     db8:	8b e2       	ldi	r24, 0x2B	; 43
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <vfprintf+0x366>
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	a7 fc       	sbrc	r10, 7
     dc0:	8d e2       	ldi	r24, 0x2D	; 45
     dc2:	b6 01       	movw	r22, r12
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     dca:	89 14       	cp	r8, r9
     dcc:	38 f4       	brcc	.+14     	; 0xddc <vfprintf+0x384>
     dce:	b6 01       	movw	r22, r12
     dd0:	80 e3       	ldi	r24, 0x30	; 48
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     dd8:	9a 94       	dec	r9
     dda:	f7 cf       	rjmp	.-18     	; 0xdca <vfprintf+0x372>
     ddc:	8a 94       	dec	r8
     dde:	f3 01       	movw	r30, r6
     de0:	e8 0d       	add	r30, r8
     de2:	f1 1d       	adc	r31, r1
     de4:	80 81       	ld	r24, Z
     de6:	b6 01       	movw	r22, r12
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     dee:	81 10       	cpse	r8, r1
     df0:	f5 cf       	rjmp	.-22     	; 0xddc <vfprintf+0x384>
     df2:	22 20       	and	r2, r2
     df4:	09 f4       	brne	.+2      	; 0xdf8 <vfprintf+0x3a0>
     df6:	42 ce       	rjmp	.-892    	; 0xa7c <vfprintf+0x24>
     df8:	b6 01       	movw	r22, r12
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
     e02:	2a 94       	dec	r2
     e04:	f6 cf       	rjmp	.-20     	; 0xdf2 <vfprintf+0x39a>
     e06:	f6 01       	movw	r30, r12
     e08:	86 81       	ldd	r24, Z+6	; 0x06
     e0a:	97 81       	ldd	r25, Z+7	; 0x07
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <vfprintf+0x3ba>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	2b 96       	adiw	r28, 0x0b	; 11
     e14:	e2 e1       	ldi	r30, 0x12	; 18
     e16:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__epilogue_restores__>

00000e1a <strnlen_P>:
     e1a:	fc 01       	movw	r30, r24
     e1c:	05 90       	lpm	r0, Z+
     e1e:	61 50       	subi	r22, 0x01	; 1
     e20:	70 40       	sbci	r23, 0x00	; 0
     e22:	01 10       	cpse	r0, r1
     e24:	d8 f7       	brcc	.-10     	; 0xe1c <strnlen_P+0x2>
     e26:	80 95       	com	r24
     e28:	90 95       	com	r25
     e2a:	8e 0f       	add	r24, r30
     e2c:	9f 1f       	adc	r25, r31
     e2e:	08 95       	ret

00000e30 <strnlen>:
     e30:	fc 01       	movw	r30, r24
     e32:	61 50       	subi	r22, 0x01	; 1
     e34:	70 40       	sbci	r23, 0x00	; 0
     e36:	01 90       	ld	r0, Z+
     e38:	01 10       	cpse	r0, r1
     e3a:	d8 f7       	brcc	.-10     	; 0xe32 <strnlen+0x2>
     e3c:	80 95       	com	r24
     e3e:	90 95       	com	r25
     e40:	8e 0f       	add	r24, r30
     e42:	9f 1f       	adc	r25, r31
     e44:	08 95       	ret

00000e46 <strrev>:
     e46:	dc 01       	movw	r26, r24
     e48:	fc 01       	movw	r30, r24
     e4a:	67 2f       	mov	r22, r23
     e4c:	71 91       	ld	r23, Z+
     e4e:	77 23       	and	r23, r23
     e50:	e1 f7       	brne	.-8      	; 0xe4a <strrev+0x4>
     e52:	32 97       	sbiw	r30, 0x02	; 2
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <strrev+0x18>
     e56:	7c 91       	ld	r23, X
     e58:	6d 93       	st	X+, r22
     e5a:	70 83       	st	Z, r23
     e5c:	62 91       	ld	r22, -Z
     e5e:	ae 17       	cp	r26, r30
     e60:	bf 07       	cpc	r27, r31
     e62:	c8 f3       	brcs	.-14     	; 0xe56 <strrev+0x10>
     e64:	08 95       	ret

00000e66 <fputc>:
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	fb 01       	movw	r30, r22
     e70:	23 81       	ldd	r18, Z+3	; 0x03
     e72:	21 fd       	sbrc	r18, 1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <fputc+0x16>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	2c c0       	rjmp	.+88     	; 0xed4 <fputc+0x6e>
     e7c:	22 ff       	sbrs	r18, 2
     e7e:	16 c0       	rjmp	.+44     	; 0xeac <fputc+0x46>
     e80:	46 81       	ldd	r20, Z+6	; 0x06
     e82:	57 81       	ldd	r21, Z+7	; 0x07
     e84:	24 81       	ldd	r18, Z+4	; 0x04
     e86:	35 81       	ldd	r19, Z+5	; 0x05
     e88:	42 17       	cp	r20, r18
     e8a:	53 07       	cpc	r21, r19
     e8c:	44 f4       	brge	.+16     	; 0xe9e <fputc+0x38>
     e8e:	a0 81       	ld	r26, Z
     e90:	b1 81       	ldd	r27, Z+1	; 0x01
     e92:	9d 01       	movw	r18, r26
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	31 83       	std	Z+1, r19	; 0x01
     e9a:	20 83       	st	Z, r18
     e9c:	8c 93       	st	X, r24
     e9e:	26 81       	ldd	r18, Z+6	; 0x06
     ea0:	37 81       	ldd	r19, Z+7	; 0x07
     ea2:	2f 5f       	subi	r18, 0xFF	; 255
     ea4:	3f 4f       	sbci	r19, 0xFF	; 255
     ea6:	37 83       	std	Z+7, r19	; 0x07
     ea8:	26 83       	std	Z+6, r18	; 0x06
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <fputc+0x6e>
     eac:	8b 01       	movw	r16, r22
     eae:	ec 01       	movw	r28, r24
     eb0:	fb 01       	movw	r30, r22
     eb2:	00 84       	ldd	r0, Z+8	; 0x08
     eb4:	f1 85       	ldd	r31, Z+9	; 0x09
     eb6:	e0 2d       	mov	r30, r0
     eb8:	09 95       	icall
     eba:	89 2b       	or	r24, r25
     ebc:	e1 f6       	brne	.-72     	; 0xe76 <fputc+0x10>
     ebe:	d8 01       	movw	r26, r16
     ec0:	16 96       	adiw	r26, 0x06	; 6
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	17 97       	sbiw	r26, 0x07	; 7
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	17 96       	adiw	r26, 0x07	; 7
     ecc:	9c 93       	st	X, r25
     ece:	8e 93       	st	-X, r24
     ed0:	16 97       	sbiw	r26, 0x06	; 6
     ed2:	ce 01       	movw	r24, r28
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <__ultoa_invert>:
     ede:	fa 01       	movw	r30, r20
     ee0:	aa 27       	eor	r26, r26
     ee2:	28 30       	cpi	r18, 0x08	; 8
     ee4:	51 f1       	breq	.+84     	; 0xf3a <__ultoa_invert+0x5c>
     ee6:	20 31       	cpi	r18, 0x10	; 16
     ee8:	81 f1       	breq	.+96     	; 0xf4a <__ultoa_invert+0x6c>
     eea:	e8 94       	clt
     eec:	6f 93       	push	r22
     eee:	6e 7f       	andi	r22, 0xFE	; 254
     ef0:	6e 5f       	subi	r22, 0xFE	; 254
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	af 4f       	sbci	r26, 0xFF	; 255
     efa:	b1 e0       	ldi	r27, 0x01	; 1
     efc:	3e d0       	rcall	.+124    	; 0xf7a <__ultoa_invert+0x9c>
     efe:	b4 e0       	ldi	r27, 0x04	; 4
     f00:	3c d0       	rcall	.+120    	; 0xf7a <__ultoa_invert+0x9c>
     f02:	67 0f       	add	r22, r23
     f04:	78 1f       	adc	r23, r24
     f06:	89 1f       	adc	r24, r25
     f08:	9a 1f       	adc	r25, r26
     f0a:	a1 1d       	adc	r26, r1
     f0c:	68 0f       	add	r22, r24
     f0e:	79 1f       	adc	r23, r25
     f10:	8a 1f       	adc	r24, r26
     f12:	91 1d       	adc	r25, r1
     f14:	a1 1d       	adc	r26, r1
     f16:	6a 0f       	add	r22, r26
     f18:	71 1d       	adc	r23, r1
     f1a:	81 1d       	adc	r24, r1
     f1c:	91 1d       	adc	r25, r1
     f1e:	a1 1d       	adc	r26, r1
     f20:	20 d0       	rcall	.+64     	; 0xf62 <__ultoa_invert+0x84>
     f22:	09 f4       	brne	.+2      	; 0xf26 <__ultoa_invert+0x48>
     f24:	68 94       	set
     f26:	3f 91       	pop	r19
     f28:	2a e0       	ldi	r18, 0x0A	; 10
     f2a:	26 9f       	mul	r18, r22
     f2c:	11 24       	eor	r1, r1
     f2e:	30 19       	sub	r19, r0
     f30:	30 5d       	subi	r19, 0xD0	; 208
     f32:	31 93       	st	Z+, r19
     f34:	de f6       	brtc	.-74     	; 0xeec <__ultoa_invert+0xe>
     f36:	cf 01       	movw	r24, r30
     f38:	08 95       	ret
     f3a:	46 2f       	mov	r20, r22
     f3c:	47 70       	andi	r20, 0x07	; 7
     f3e:	40 5d       	subi	r20, 0xD0	; 208
     f40:	41 93       	st	Z+, r20
     f42:	b3 e0       	ldi	r27, 0x03	; 3
     f44:	0f d0       	rcall	.+30     	; 0xf64 <__ultoa_invert+0x86>
     f46:	c9 f7       	brne	.-14     	; 0xf3a <__ultoa_invert+0x5c>
     f48:	f6 cf       	rjmp	.-20     	; 0xf36 <__ultoa_invert+0x58>
     f4a:	46 2f       	mov	r20, r22
     f4c:	4f 70       	andi	r20, 0x0F	; 15
     f4e:	40 5d       	subi	r20, 0xD0	; 208
     f50:	4a 33       	cpi	r20, 0x3A	; 58
     f52:	18 f0       	brcs	.+6      	; 0xf5a <__ultoa_invert+0x7c>
     f54:	49 5d       	subi	r20, 0xD9	; 217
     f56:	31 fd       	sbrc	r19, 1
     f58:	40 52       	subi	r20, 0x20	; 32
     f5a:	41 93       	st	Z+, r20
     f5c:	02 d0       	rcall	.+4      	; 0xf62 <__ultoa_invert+0x84>
     f5e:	a9 f7       	brne	.-22     	; 0xf4a <__ultoa_invert+0x6c>
     f60:	ea cf       	rjmp	.-44     	; 0xf36 <__ultoa_invert+0x58>
     f62:	b4 e0       	ldi	r27, 0x04	; 4
     f64:	a6 95       	lsr	r26
     f66:	97 95       	ror	r25
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	ba 95       	dec	r27
     f70:	c9 f7       	brne	.-14     	; 0xf64 <__ultoa_invert+0x86>
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 05       	cpc	r22, r1
     f76:	71 05       	cpc	r23, r1
     f78:	08 95       	ret
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	0a 2e       	mov	r0, r26
     f80:	06 94       	lsr	r0
     f82:	57 95       	ror	r21
     f84:	47 95       	ror	r20
     f86:	37 95       	ror	r19
     f88:	27 95       	ror	r18
     f8a:	ba 95       	dec	r27
     f8c:	c9 f7       	brne	.-14     	; 0xf80 <__ultoa_invert+0xa2>
     f8e:	62 0f       	add	r22, r18
     f90:	73 1f       	adc	r23, r19
     f92:	84 1f       	adc	r24, r20
     f94:	95 1f       	adc	r25, r21
     f96:	a0 1d       	adc	r26, r0
     f98:	08 95       	ret

00000f9a <__prologue_saves__>:
     f9a:	2f 92       	push	r2
     f9c:	3f 92       	push	r3
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	ca 1b       	sub	r28, r26
     fc4:	db 0b       	sbc	r29, r27
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	09 94       	ijmp

00000fd2 <__epilogue_restores__>:
     fd2:	2a 88       	ldd	r2, Y+18	; 0x12
     fd4:	39 88       	ldd	r3, Y+17	; 0x11
     fd6:	48 88       	ldd	r4, Y+16	; 0x10
     fd8:	5f 84       	ldd	r5, Y+15	; 0x0f
     fda:	6e 84       	ldd	r6, Y+14	; 0x0e
     fdc:	7d 84       	ldd	r7, Y+13	; 0x0d
     fde:	8c 84       	ldd	r8, Y+12	; 0x0c
     fe0:	9b 84       	ldd	r9, Y+11	; 0x0b
     fe2:	aa 84       	ldd	r10, Y+10	; 0x0a
     fe4:	b9 84       	ldd	r11, Y+9	; 0x09
     fe6:	c8 84       	ldd	r12, Y+8	; 0x08
     fe8:	df 80       	ldd	r13, Y+7	; 0x07
     fea:	ee 80       	ldd	r14, Y+6	; 0x06
     fec:	fd 80       	ldd	r15, Y+5	; 0x05
     fee:	0c 81       	ldd	r16, Y+4	; 0x04
     ff0:	1b 81       	ldd	r17, Y+3	; 0x03
     ff2:	aa 81       	ldd	r26, Y+2	; 0x02
     ff4:	b9 81       	ldd	r27, Y+1	; 0x01
     ff6:	ce 0f       	add	r28, r30
     ff8:	d1 1d       	adc	r29, r1
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	ed 01       	movw	r28, r26
    1006:	08 95       	ret

00001008 <_exit>:
    1008:	f8 94       	cli

0000100a <__stop_program>:
    100a:	ff cf       	rjmp	.-2      	; 0x100a <__stop_program>
