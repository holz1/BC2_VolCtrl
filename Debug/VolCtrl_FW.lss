
VolCtrl_FW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  0000055a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028d  0080018a  0080018a  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001657  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba9  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e9  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d1  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfb  00000000  00000000  00003d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_18>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_19>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_28>
  74:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_29>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e5       	ldi	r30, 0x5A	; 90
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 38       	cpi	r26, 0x8A	; 138
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	24 e0       	ldi	r18, 0x04	; 4
  d8:	aa e8       	ldi	r26, 0x8A	; 138
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 31       	cpi	r26, 0x17	; 23
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:

uint16_t tmp;

int main(void)
{
	uart0_putc(tmp & 0x00FF);
  f2:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <tmp>
  f6:	0e 94 3f 01 	call	0x27e	; 0x27e <uart0_putc>
	
	sei();
  fa:	78 94       	sei
		
	uart0_init(UART_BAUD_SELECT(9600, F_CPU));
  fc:	81 e8       	ldi	r24, 0x81	; 129
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 04 01 	call	0x208	; 0x208 <uart0_init>
	uart1_init(UART_BAUD_SELECT(9600, F_CPU));
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 49 02 	call	0x492	; 0x492 <uart1_init>
	
    /* Replace with your application code */
    while (1) 
    {		
		if (uart0_getln(uart0_line_buf) == 0x01){
 10c:	87 e9       	ldi	r24, 0x97	; 151
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	0e 94 9d 01 	call	0x33a	; 0x33a <uart0_getln>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	51 f4       	brne	.+20     	; 0x12c <main+0x3a>
			uart0_puts(uart0_line_buf);
 118:	87 e9       	ldi	r24, 0x97	; 151
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
			uart0_putc('\r');
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	0e 94 3f 01 	call	0x27e	; 0x27e <uart0_putc>
			uart0_putc('\n');
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	0e 94 3f 01 	call	0x27e	; 0x27e <uart0_putc>
		}

		if (uart1_available() > 0){
 12c:	0e 94 9d 02 	call	0x53a	; 0x53a <uart1_available>
 130:	89 2b       	or	r24, r25
 132:	61 f3       	breq	.-40     	; 0x10c <main+0x1a>
			tmp = uart1_getc();
 134:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart1_getc>
 138:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <tmp>
 13c:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <tmp+0x1>
			uart1_putc(tmp & 0x00FF);
 140:	0e 94 84 02 	call	0x508	; 0x508 <uart1_putc>
 144:	e3 cf       	rjmp	.-58     	; 0x10c <main+0x1a>

00000146 <__vector_18>:

	while ((c = pgm_read_byte(progmem_s++))) {
		uart1_putc(c);
	}

} /* uart1_puts_p */
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 164:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 168:	28 71       	andi	r18, 0x18	; 24
 16a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <UART_RxHead>
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	99 27       	eor	r25, r25
 176:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <UART_RxTail>
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	84 17       	cp	r24, r20
 17e:	95 07       	cpc	r25, r21
 180:	39 f0       	breq	.+14     	; 0x190 <__vector_18+0x4a>
 182:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <UART_RxHead>
 186:	fc 01       	movw	r30, r24
 188:	eb 56       	subi	r30, 0x6B	; 107
 18a:	fd 4f       	sbci	r31, 0xFD	; 253
 18c:	30 83       	st	Z, r19
 18e:	01 c0       	rjmp	.+2      	; 0x192 <__vector_18+0x4c>
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <UART_LastRxError>
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_19>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <UART_TxHead>
 1c6:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <UART_TxTail>
 1ca:	98 17       	cp	r25, r24
 1cc:	79 f0       	breq	.+30     	; 0x1ec <__vector_19+0x3c>
 1ce:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <UART_TxTail>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	99 27       	eor	r25, r25
 1da:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <UART_TxTail>
 1de:	fc 01       	movw	r30, r24
 1e0:	eb 5e       	subi	r30, 0xEB	; 235
 1e2:	fc 4f       	sbci	r31, 0xFC	; 252
 1e4:	80 81       	ld	r24, Z
 1e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__vector_19+0x46>
 1ec:	e1 ec       	ldi	r30, 0xC1	; 193
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 7d       	andi	r24, 0xDF	; 223
 1f4:	80 83       	st	Z, r24
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <uart0_init>:
 208:	f8 94       	cli
 20a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <UART_TxHead>
 20e:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <UART_TxTail>
 212:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <UART_RxHead>
 216:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <UART_RxTail>
 21a:	78 94       	sei
 21c:	99 23       	and	r25, r25
 21e:	24 f4       	brge	.+8      	; 0x228 <uart0_init+0x20>
 220:	22 e0       	ldi	r18, 0x02	; 2
 222:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	9f 77       	andi	r25, 0x7F	; 127
 228:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 22c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 230:	88 e9       	ldi	r24, 0x98	; 152
 232:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 23c:	08 95       	ret

0000023e <uart0_getc>:
 23e:	f8 94       	cli
 240:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <UART_RxHead>
 244:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <UART_RxTail>
 248:	98 13       	cpse	r25, r24
 24a:	04 c0       	rjmp	.+8      	; 0x254 <uart0_getc+0x16>
 24c:	78 94       	sei
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	08 95       	ret
 254:	78 94       	sei
 256:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <UART_RxTail>
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	99 27       	eor	r25, r25
 262:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <UART_RxTail>
 266:	fc 01       	movw	r30, r24
 268:	eb 56       	subi	r30, 0x6B	; 107
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	20 81       	ld	r18, Z
 26e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <UART_LastRxError>
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	98 2f       	mov	r25, r24
 276:	88 27       	eor	r24, r24
 278:	82 0f       	add	r24, r18
 27a:	91 1d       	adc	r25, r1
 27c:	08 95       	ret

0000027e <uart0_putc>:
 27e:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <UART_TxHead>
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	5f 4f       	sbci	r21, 0xFF	; 255
 288:	4f 77       	andi	r20, 0x7F	; 127
 28a:	55 27       	eor	r21, r21
 28c:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <UART_TxTail>
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	42 17       	cp	r20, r18
 294:	53 07       	cpc	r21, r19
 296:	d1 f3       	breq	.-12     	; 0x28c <uart0_putc+0xe>
 298:	fa 01       	movw	r30, r20
 29a:	eb 5e       	subi	r30, 0xEB	; 235
 29c:	fc 4f       	sbci	r31, 0xFC	; 252
 29e:	80 83       	st	Z, r24
 2a0:	40 93 94 02 	sts	0x0294, r20	; 0x800294 <UART_TxHead>
 2a4:	e1 ec       	ldi	r30, 0xC1	; 193
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <uart0_puts>:
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	88 81       	ld	r24, Y
 2b8:	88 23       	and	r24, r24
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <uart0_puts+0x18>
 2bc:	21 96       	adiw	r28, 0x01	; 1
 2be:	0e 94 3f 01 	call	0x27e	; 0x27e <uart0_putc>
 2c2:	89 91       	ld	r24, Y+
 2c4:	81 11       	cpse	r24, r1
 2c6:	fb cf       	rjmp	.-10     	; 0x2be <uart0_puts+0xe>
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <uart0_available>:
 2ce:	f8 94       	cli
 2d0:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <UART_RxHead>
 2d4:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <UART_RxTail>
 2d8:	78 94       	sei
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	80 58       	subi	r24, 0x80	; 128
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	82 1b       	sub	r24, r18
 2e2:	91 09       	sbc	r25, r1
 2e4:	8f 77       	andi	r24, 0x7F	; 127
 2e6:	99 27       	eor	r25, r25
 2e8:	08 95       	ret

000002ea <uart0_errchk>:
 2ea:	93 ff       	sbrs	r25, 3
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <uart0_errchk+0x12>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	38 e0       	ldi	r19, 0x08	; 8
 2fa:	1d c0       	rjmp	.+58     	; 0x336 <uart0_errchk+0x4c>
 2fc:	92 ff       	sbrs	r25, 2
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <uart0_errchk+0x24>
 300:	8b e1       	ldi	r24, 0x1B	; 27
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	34 e0       	ldi	r19, 0x04	; 4
 30c:	14 c0       	rjmp	.+40     	; 0x336 <uart0_errchk+0x4c>
 30e:	91 ff       	sbrs	r25, 1
 310:	07 c0       	rjmp	.+14     	; 0x320 <uart0_errchk+0x36>
 312:	88 e3       	ldi	r24, 0x38	; 56
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	32 e0       	ldi	r19, 0x02	; 2
 31e:	0b c0       	rjmp	.+22     	; 0x336 <uart0_errchk+0x4c>
 320:	9c 01       	movw	r18, r24
 322:	22 27       	eor	r18, r18
 324:	31 70       	andi	r19, 0x01	; 1
 326:	90 ff       	sbrs	r25, 0
 328:	06 c0       	rjmp	.+12     	; 0x336 <uart0_errchk+0x4c>
 32a:	87 e5       	ldi	r24, 0x57	; 87
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	31 e0       	ldi	r19, 0x01	; 1
 336:	c9 01       	movw	r24, r18
 338:	08 95       	ret

0000033a <uart0_getln>:
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	8c 01       	movw	r16, r24
 34a:	0e 94 67 01 	call	0x2ce	; 0x2ce <uart0_available>
 34e:	ec 01       	movw	r28, r24
 350:	89 2b       	or	r24, r25
 352:	a9 f1       	breq	.+106    	; 0x3be <uart0_getln+0x84>
 354:	0e 94 1f 01 	call	0x23e	; 0x23e <uart0_getc>
 358:	f8 2e       	mov	r15, r24
 35a:	e9 2e       	mov	r14, r25
 35c:	0e 94 75 01 	call	0x2ea	; 0x2ea <uart0_errchk>
 360:	ec 01       	movw	r28, r24
 362:	89 2b       	or	r24, r25
 364:	31 f0       	breq	.+12     	; 0x372 <uart0_getln+0x38>
 366:	8f 2d       	mov	r24, r15
 368:	9e 2d       	mov	r25, r14
 36a:	0e 94 75 01 	call	0x2ea	; 0x2ea <uart0_errchk>
 36e:	ec 01       	movw	r28, r24
 370:	26 c0       	rjmp	.+76     	; 0x3be <uart0_getln+0x84>
 372:	8d e0       	ldi	r24, 0x0D	; 13
 374:	f8 12       	cpse	r15, r24
 376:	0e c0       	rjmp	.+28     	; 0x394 <uart0_getln+0x5a>
 378:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 37c:	88 23       	and	r24, r24
 37e:	29 f0       	breq	.+10     	; 0x38a <uart0_getln+0x50>
 380:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
 384:	c1 e0       	ldi	r28, 0x01	; 1
 386:	d0 e0       	ldi	r29, 0x00	; 0
 388:	1a c0       	rjmp	.+52     	; 0x3be <uart0_getln+0x84>
 38a:	f8 01       	movw	r30, r16
 38c:	10 82       	st	Z, r1
 38e:	c1 e0       	ldi	r28, 0x01	; 1
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	15 c0       	rjmp	.+42     	; 0x3be <uart0_getln+0x84>
 394:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 398:	88 23       	and	r24, r24
 39a:	6c f0       	brlt	.+26     	; 0x3b6 <uart0_getln+0x7c>
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	98 0f       	add	r25, r24
 3a0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <__data_end>
 3a4:	f8 01       	movw	r30, r16
 3a6:	e8 0f       	add	r30, r24
 3a8:	f1 1d       	adc	r31, r1
 3aa:	f0 82       	st	Z, r15
 3ac:	f8 01       	movw	r30, r16
 3ae:	e9 0f       	add	r30, r25
 3b0:	f1 1d       	adc	r31, r1
 3b2:	10 82       	st	Z, r1
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <uart0_getln+0x84>
 3b6:	8e e6       	ldi	r24, 0x6E	; 110
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart0_puts>
 3be:	ce 01       	movw	r24, r28
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	08 95       	ret

000003d0 <__vector_28>:
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 3ee:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 3f2:	28 71       	andi	r18, 0x18	; 24
 3f4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <UART1_RxHead>
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	99 27       	eor	r25, r25
 400:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <UART1_RxTail>
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	84 17       	cp	r24, r20
 408:	95 07       	cpc	r25, r21
 40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <UART1_RxHead>
 410:	fc 01       	movw	r30, r24
 412:	e0 57       	subi	r30, 0x70	; 112
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	30 83       	st	Z, r19
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	22 e0       	ldi	r18, 0x02	; 2
 41c:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <UART1_LastRxError>
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_29>:
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
 44c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <UART1_TxHead>
 450:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <UART1_TxTail>
 454:	98 17       	cp	r25, r24
 456:	79 f0       	breq	.+30     	; 0x476 <__vector_29+0x3c>
 458:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <UART1_TxTail>
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	8f 77       	andi	r24, 0x7F	; 127
 462:	99 27       	eor	r25, r25
 464:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <UART1_TxTail>
 468:	fc 01       	movw	r30, r24
 46a:	e0 5f       	subi	r30, 0xF0	; 240
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	80 81       	ld	r24, Z
 470:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 474:	05 c0       	rjmp	.+10     	; 0x480 <__vector_29+0x46>
 476:	e9 ec       	ldi	r30, 0xC9	; 201
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8f 7d       	andi	r24, 0xDF	; 223
 47e:	80 83       	st	Z, r24
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <uart1_init>:
 492:	f8 94       	cli
 494:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <UART1_TxHead>
 498:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <UART1_TxTail>
 49c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <UART1_RxHead>
 4a0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <UART1_RxTail>
 4a4:	78 94       	sei
 4a6:	99 23       	and	r25, r25
 4a8:	24 f4       	brge	.+8      	; 0x4b2 <uart1_init+0x20>
 4aa:	22 e0       	ldi	r18, 0x02	; 2
 4ac:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 4b0:	9f 77       	andi	r25, 0x7F	; 127
 4b2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 4b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 4ba:	88 e9       	ldi	r24, 0x98	; 152
 4bc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 4c6:	08 95       	ret

000004c8 <uart1_getc>:
 4c8:	f8 94       	cli
 4ca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <UART1_RxHead>
 4ce:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <UART1_RxTail>
 4d2:	98 13       	cpse	r25, r24
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <uart1_getc+0x16>
 4d6:	78 94       	sei
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	08 95       	ret
 4de:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <UART1_RxTail>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	8f 77       	andi	r24, 0x7F	; 127
 4e8:	99 27       	eor	r25, r25
 4ea:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <UART1_RxTail>
 4ee:	78 94       	sei
 4f0:	fc 01       	movw	r30, r24
 4f2:	e0 57       	subi	r30, 0x70	; 112
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	20 81       	ld	r18, Z
 4f8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <UART1_LastRxError>
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	98 2f       	mov	r25, r24
 500:	88 27       	eor	r24, r24
 502:	82 0f       	add	r24, r18
 504:	91 1d       	adc	r25, r1
 506:	08 95       	ret

00000508 <uart1_putc>:
 508:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <UART1_TxHead>
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	4f 5f       	subi	r20, 0xFF	; 255
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	4f 77       	andi	r20, 0x7F	; 127
 514:	55 27       	eor	r21, r21
 516:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <UART1_TxTail>
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	42 17       	cp	r20, r18
 51e:	53 07       	cpc	r21, r19
 520:	d1 f3       	breq	.-12     	; 0x516 <uart1_putc+0xe>
 522:	fa 01       	movw	r30, r20
 524:	e0 5f       	subi	r30, 0xF0	; 240
 526:	fd 4f       	sbci	r31, 0xFD	; 253
 528:	80 83       	st	Z, r24
 52a:	40 93 8f 01 	sts	0x018F, r20	; 0x80018f <UART1_TxHead>
 52e:	e9 ec       	ldi	r30, 0xC9	; 201
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	80 62       	ori	r24, 0x20	; 32
 536:	80 83       	st	Z, r24
 538:	08 95       	ret

0000053a <uart1_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 53a:	f8 94       	cli
uint16_t uart1_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX1_BUFFER_SIZE + UART1_RxHead - UART1_RxTail) & UART_RX1_BUFFER_MASK;
 53c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <UART1_RxHead>
 540:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <UART1_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 544:	78 94       	sei
	}
	return ret;
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	80 58       	subi	r24, 0x80	; 128
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	82 1b       	sub	r24, r18
 54e:	91 09       	sbc	r25, r1
} /* uart1_available */
 550:	8f 77       	andi	r24, 0x7F	; 127
 552:	99 27       	eor	r25, r25
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
