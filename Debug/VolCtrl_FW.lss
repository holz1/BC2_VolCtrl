
VolCtrl_FW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000261  00800272  00800272  000011f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be1  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d36  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba3  00000000  00000000  00003caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00004854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ad  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001027  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_19>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_28>
  74:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_29>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ee       	ldi	r30, 0xEC	; 236
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 37       	cpi	r26, 0x72	; 114
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	24 e0       	ldi	r18, 0x04	; 4
  d8:	a2 e7       	ldi	r26, 0x72	; 114
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 3d       	cpi	r26, 0xD3	; 211
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  ea:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <volup>:

uint16_t tmp;


void volup(uint8_t argc, char *argv[]){
	uart0_puts("volup detected\r\n");
  f2:	8c e3       	ldi	r24, 0x3C	; 60
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
  fa:	08 95       	ret

000000fc <voldown>:
}

void voldown(uint8_t argc, char *argv[]){
	uart0_puts("voldown detected\r\n");
  fc:	8d e4       	ldi	r24, 0x4D	; 77
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
 104:	08 95       	ret

00000106 <setVolume>:
}

void setVolume(uint8_t argc, char *argv[]){
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <setVolume+0x12>
 118:	00 d0       	rcall	.+0      	; 0x11a <setVolume+0x14>
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	f8 2e       	mov	r15, r24
 122:	6b 01       	movw	r12, r22
		
		
	char buffer[5];
	
	uart0_puts("setvolume detected\rn");
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	
	uart0_puts("argc: ");
 12c:	85 e7       	ldi	r24, 0x75	; 117
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	uart0_puts(itoa(argc, buffer, 10));
 134:	0f 2d       	mov	r16, r15
 136:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 138:	4a e0       	ldi	r20, 0x0A	; 10
 13a:	be 01       	movw	r22, r28
 13c:	6f 5f       	subi	r22, 0xFF	; 255
 13e:	7f 4f       	sbci	r23, 0xFF	; 255
 140:	c8 01       	movw	r24, r16
 142:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__itoa_ncheck>
 146:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	uart0_puts("\r\n");
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	
	for (int i=0; i < argc; i++)
 152:	10 16       	cp	r1, r16
 154:	11 06       	cpc	r1, r17
 156:	c4 f4       	brge	.+48     	; 0x188 <setVolume+0x82>
 158:	86 01       	movw	r16, r12
 15a:	ef 2c       	mov	r14, r15
 15c:	f1 2c       	mov	r15, r1
 15e:	ee 0c       	add	r14, r14
 160:	ff 1c       	adc	r15, r15
 162:	ec 0c       	add	r14, r12
 164:	fd 1c       	adc	r15, r13
	{
		uart0_puts("argv: ");
 166:	8c e7       	ldi	r24, 0x7C	; 124
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		uart0_puts(argv[i]);
 16e:	f8 01       	movw	r30, r16
 170:	81 91       	ld	r24, Z+
 172:	91 91       	ld	r25, Z+
 174:	8f 01       	movw	r16, r30
 176:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		uart0_puts("\r\n");
 17a:	83 ec       	ldi	r24, 0xC3	; 195
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	
	uart0_puts("argc: ");
	uart0_puts(itoa(argc, buffer, 10));
	uart0_puts("\r\n");
	
	for (int i=0; i < argc; i++)
 182:	0e 15       	cp	r16, r14
 184:	1f 05       	cpc	r17, r15
 186:	79 f7       	brne	.-34     	; 0x166 <setVolume+0x60>
	{
		uart0_puts("argv: ");
		uart0_puts(argv[i]);
		uart0_puts("\r\n");
	}
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	ff 90       	pop	r15
 19c:	ef 90       	pop	r14
 19e:	df 90       	pop	r13
 1a0:	cf 90       	pop	r12
 1a2:	08 95       	ret

000001a4 <cmd_parser>:

command cmd_set[NUM_CMDS] = {{0, &volup, "volup"},
							 {0, &voldown, "voldown"},
							 {1, &setVolume, "setvolume"}};
								 
uint8_t cmd_parser(char* cmd){
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	27 97       	sbiw	r28, 0x07	; 7
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	8c 01       	movw	r16, r24
	
	if (ECHO_EN) {
		uart0_puts(cmd);
 1ca:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		uart0_puts("\r\n");
 1ce:	83 ec       	ldi	r24, 0xC3	; 195
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
	}
		
	
	command_ptr detc_cmd = NULL;
	char delim[] = " ,"; // " " and ","
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	9c e2       	ldi	r25, 0x2C	; 44
 1da:	9a 83       	std	Y+2, r25	; 0x02
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	1b 82       	std	Y+3, r1	; 0x03
	char *argv[MAX_NUM_ARG];	//argument vector containing pointers to strings
	uint8_t tmp_strlen;

	//convert input string to lowercase
	//command interpreter should be case insensitive
	strlwr(cmd);
 1e0:	c8 01       	movw	r24, r16
 1e2:	0e 94 c6 04 	call	0x98c	; 0x98c <strlwr>
	
	//Receive the first token
	char *token = strtok(cmd, delim);
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 b1 04 	call	0x962	; 0x962 <strtok>
 1f2:	5c 01       	movw	r10, r24
 1f4:	06 e0       	ldi	r16, 0x06	; 6
 1f6:	11 e0       	ldi	r17, 0x01	; 1
 1f8:	0f 2e       	mov	r0, r31
 1fa:	fc e3       	ldi	r31, 0x3C	; 60
 1fc:	cf 2e       	mov	r12, r31
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	df 2e       	mov	r13, r31
 202:	f0 2d       	mov	r31, r0
		uart0_puts(cmd);
		uart0_puts("\r\n");
	}
		
	
	command_ptr detc_cmd = NULL;
 204:	e1 2c       	mov	r14, r1
 206:	f1 2c       	mov	r15, r1
	
	//The first token is the command word
	for (int i = 0; i < NUM_CMDS; i++)
	{
		//search for the input cmd string in available commands 
		if ( strcmp( token, cmd_set[i].cmd_word ) == 0)
 208:	b8 01       	movw	r22, r16
 20a:	6d 5f       	subi	r22, 0xFD	; 253
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	c5 01       	movw	r24, r10
 210:	0e 94 b6 04 	call	0x96c	; 0x96c <strcmp>
 214:	89 2b       	or	r24, r25
 216:	09 f4       	brne	.+2      	; 0x21a <cmd_parser+0x76>
		{
			//cmd string matches a command
			detc_cmd = &cmd_set[i];
 218:	78 01       	movw	r14, r16
 21a:	0e 5e       	subi	r16, 0xEE	; 238
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//Receive the first token
	char *token = strtok(cmd, delim);
	
	//The first token is the command word
	for (int i = 0; i < NUM_CMDS; i++)
 21e:	0c 15       	cp	r16, r12
 220:	1d 05       	cpc	r17, r13
 222:	91 f7       	brne	.-28     	; 0x208 <cmd_parser+0x64>
			//cmd string matches a command
			detc_cmd = &cmd_set[i];
		}
	}
	
	if (detc_cmd == NULL){
 224:	e1 14       	cp	r14, r1
 226:	f1 04       	cpc	r15, r1
 228:	31 f4       	brne	.+12     	; 0x236 <cmd_parser+0x92>
		//No cmd string found
		uart0_puts("Not valid command!\r\n");
 22a:	83 e8       	ldi	r24, 0x83	; 131
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		return -1;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	82 c0       	rjmp	.+260    	; 0x33a <cmd_parser+0x196>
	//all other tokens are arguments
	//Collect all arguments in cmd
	argc = 0;
	err = 0;
	
	token = strtok(NULL, delim);
 236:	be 01       	movw	r22, r28
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 b1 04 	call	0x962	; 0x962 <strtok>
 244:	8c 01       	movw	r16, r24
	while(token != NULL)
 246:	89 2b       	or	r24, r25
 248:	09 f4       	brne	.+2      	; 0x24c <cmd_parser+0xa8>
 24a:	6a c0       	rjmp	.+212    	; 0x320 <cmd_parser+0x17c>
 24c:	d1 2c       	mov	r13, r1
	{
		//ignore empty tokens (eg. 10, 11) the " " would be a empty token
		if( !(strcmp(token, "") == 0) ){
 24e:	d8 01       	movw	r26, r16
 250:	8c 91       	ld	r24, X
 252:	88 23       	and	r24, r24
 254:	91 f1       	breq	.+100    	; 0x2ba <cmd_parser+0x116>

			//Check number of arguments
			if ((argc >= detc_cmd->arg_cnt) || (argc >= MAX_NUM_ARG)){
 256:	f7 01       	movw	r30, r14
 258:	80 81       	ld	r24, Z
 25a:	d8 16       	cp	r13, r24
 25c:	18 f4       	brcc	.+6      	; 0x264 <cmd_parser+0xc0>
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	fd 15       	cp	r31, r13
 262:	28 f4       	brcc	.+10     	; 0x26e <cmd_parser+0xca>
				uart0_puts("Too many arguments!\r\n");
 264:	88 e9       	ldi	r24, 0x98	; 152
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
				err = 1;
				break;
 26c:	5f c0       	rjmp	.+190    	; 0x32c <cmd_parser+0x188>
			}
			
			//Check argument string length
			tmp_strlen = strlen(token); // strlen is not including '\0'
 26e:	f8 01       	movw	r30, r16
 270:	01 90       	ld	r0, Z+
 272:	00 20       	and	r0, r0
 274:	e9 f7       	brne	.-6      	; 0x270 <cmd_parser+0xcc>
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	cf 01       	movw	r24, r30
 27a:	80 1b       	sub	r24, r16
 27c:	91 0b       	sbc	r25, r17
			if ( tmp_strlen + 1 >= MAX_ARG_LEN ){
 27e:	99 27       	eor	r25, r25
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	8f 30       	cpi	r24, 0x0F	; 15
 284:	91 05       	cpc	r25, r1
 286:	2c f0       	brlt	.+10     	; 0x292 <cmd_parser+0xee>
				uart0_puts("Max arg cnt exceeded!\r\n");
 288:	8e ea       	ldi	r24, 0xAE	; 174
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
				err = 1;
				break;
 290:	4d c0       	rjmp	.+154    	; 0x32c <cmd_parser+0x188>
			}
			
			//allocate memory for argument string
			argv[argc] = (char *) malloc(tmp_strlen  + 1); 
 292:	0e 94 90 03 	call	0x720	; 0x720 <malloc>
 296:	ed 2d       	mov	r30, r13
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	2c 0f       	add	r18, r28
 2a4:	3d 1f       	adc	r19, r29
 2a6:	e2 0f       	add	r30, r18
 2a8:	f3 1f       	adc	r31, r19
 2aa:	94 83       	std	Z+4, r25	; 0x04
 2ac:	83 83       	std	Z+3, r24	; 0x03
			
			if (argv[argc] == NULL){
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	81 f0       	breq	.+32     	; 0x2d2 <cmd_parser+0x12e>
				err = 1;
				break;
			}
	
			//copy the token to the argument vector
			strcpy(argv[argc] , token);
 2b2:	b8 01       	movw	r22, r16
 2b4:	0e 94 bf 04 	call	0x97e	; 0x97e <strcpy>
			
			//increase argument counter			
			argc++;
 2b8:	d3 94       	inc	r13
		}				
		token = strtok(NULL, delim);
 2ba:	be 01       	movw	r22, r28
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 b1 04 	call	0x962	; 0x962 <strtok>
 2c8:	8c 01       	movw	r16, r24
	//Collect all arguments in cmd
	argc = 0;
	err = 0;
	
	token = strtok(NULL, delim);
	while(token != NULL)
 2ca:	89 2b       	or	r24, r25
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <cmd_parser+0x12c>
 2ce:	bf cf       	rjmp	.-130    	; 0x24e <cmd_parser+0xaa>
 2d0:	28 c0       	rjmp	.+80     	; 0x322 <cmd_parser+0x17e>
		token = strtok(NULL, delim);
	}
	
	//all arguments parsed, check if the correct number of arguments was found
	if (argc != detc_cmd->arg_cnt){
		uart0_puts("Incorrect number of Arguments!\r\n");
 2d2:	86 ec       	ldi	r24, 0xC6	; 198
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		err=1;
 2da:	ff 24       	eor	r15, r15
 2dc:	f3 94       	inc	r15
		//all fine call fuction and pass arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
	}

	//free allocated memory
	for (int i = 0; i < argc; i++){
 2de:	0d 2d       	mov	r16, r13
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	10 16       	cp	r1, r16
 2e4:	11 06       	cpc	r1, r17
 2e6:	5c f4       	brge	.+22     	; 0x2fe <cmd_parser+0x15a>
		free(argv[i]);
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	9d 81       	ldd	r25, Y+5	; 0x05
 2ec:	0e 94 28 04 	call	0x850	; 0x850 <free>
		//all fine call fuction and pass arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
	}

	//free allocated memory
	for (int i = 0; i < argc; i++){
 2f0:	02 30       	cpi	r16, 0x02	; 2
 2f2:	11 05       	cpc	r17, r1
 2f4:	24 f0       	brlt	.+8      	; 0x2fe <cmd_parser+0x15a>
		free(argv[i]);
 2f6:	8e 81       	ldd	r24, Y+6	; 0x06
 2f8:	9f 81       	ldd	r25, Y+7	; 0x07
 2fa:	0e 94 28 04 	call	0x850	; 0x850 <free>
	}
	
	if (detc_cmd == NULL){
		//No cmd string found
		uart0_puts("Not valid command!\r\n");
		return -1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	f1 10       	cpse	r15, r1
 302:	1b c0       	rjmp	.+54     	; 0x33a <cmd_parser+0x196>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	19 c0       	rjmp	.+50     	; 0x33a <cmd_parser+0x196>
	}
	
	
	if (!err){
		//all fine call fuction and pass arguments
		detc_cmd->cmd_fun_ptr(argc, argv);
 308:	d7 01       	movw	r26, r14
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	ed 91       	ld	r30, X+
 30e:	fc 91       	ld	r31, X
 310:	12 97       	sbiw	r26, 0x02	; 2
 312:	be 01       	movw	r22, r28
 314:	6c 5f       	subi	r22, 0xFC	; 252
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	8d 2d       	mov	r24, r13
 31a:	09 95       	icall
 31c:	f1 2c       	mov	r15, r1
 31e:	df cf       	rjmp	.-66     	; 0x2de <cmd_parser+0x13a>
		return -1;
	}
	
	//all other tokens are arguments
	//Collect all arguments in cmd
	argc = 0;
 320:	d1 2c       	mov	r13, r1
		}				
		token = strtok(NULL, delim);
	}
	
	//all arguments parsed, check if the correct number of arguments was found
	if (argc != detc_cmd->arg_cnt){
 322:	f7 01       	movw	r30, r14
 324:	80 81       	ld	r24, Z
 326:	d8 12       	cpse	r13, r24
 328:	d4 cf       	rjmp	.-88     	; 0x2d2 <cmd_parser+0x12e>
 32a:	ee cf       	rjmp	.-36     	; 0x308 <cmd_parser+0x164>
 32c:	d7 01       	movw	r26, r14
 32e:	8c 91       	ld	r24, X
 330:	d8 12       	cpse	r13, r24
 332:	cf cf       	rjmp	.-98     	; 0x2d2 <cmd_parser+0x12e>
 334:	ff 24       	eor	r15, r15
 336:	f3 94       	inc	r15
 338:	d2 cf       	rjmp	.-92     	; 0x2de <cmd_parser+0x13a>
		free(argv[i]);
	}
	
	if (err) return 1;
	else return 0;
};
 33a:	27 96       	adiw	r28, 0x07	; 7
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	08 95       	ret

0000035c <main>:

int main(void)
{

	
	sei();
 35c:	78 94       	sei

		
	uart0_init(UART_BAUD_SELECT(9600, F_CPU));
 35e:	81 e8       	ldi	r24, 0x81	; 129
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 23 02 	call	0x446	; 0x446 <uart0_init>
	uart1_init(UART_BAUD_SELECT(9600, F_CPU));
 366:	81 e8       	ldi	r24, 0x81	; 129
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 75 03 	call	0x6ea	; 0x6ea <uart1_init>
		
	}*/
	
	while (1)
	{
		if (uart0_getln(uart0_line_buf)){
 36e:	8f e7       	ldi	r24, 0x7F	; 127
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	0e 94 bc 02 	call	0x578	; 0x578 <uart0_getln>
 376:	89 2b       	or	r24, r25
 378:	d1 f3       	breq	.-12     	; 0x36e <main+0x12>
			cmd_parser(uart0_line_buf);
 37a:	8f e7       	ldi	r24, 0x7F	; 127
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <cmd_parser>
 382:	f5 cf       	rjmp	.-22     	; 0x36e <main+0x12>

00000384 <__vector_18>:
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    __asm__ volatile ("" ::: "memory");
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
 39e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3a2:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a6:	28 71       	andi	r18, 0x18	; 24
 3a8:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <UART_RxHead>
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	8f 77       	andi	r24, 0x7F	; 127
 3b2:	99 27       	eor	r25, r25
 3b4:	40 91 7b 03 	lds	r20, 0x037B	; 0x80037b <UART_RxTail>
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	84 17       	cp	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	39 f0       	breq	.+14     	; 0x3ce <__vector_18+0x4a>
 3c0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <UART_RxHead>
 3c4:	fc 01       	movw	r30, r24
 3c6:	e1 58       	subi	r30, 0x81	; 129
 3c8:	fc 4f       	sbci	r31, 0xFC	; 252
 3ca:	30 83       	st	Z, r19
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <__vector_18+0x4c>
 3ce:	22 e0       	ldi	r18, 0x02	; 2
 3d0:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <UART_LastRxError>
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <__vector_19>:
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
 400:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <UART_TxHead>
 404:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <UART_TxTail>
 408:	98 17       	cp	r25, r24
 40a:	79 f0       	breq	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 40c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <UART_TxTail>
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	8f 77       	andi	r24, 0x7F	; 127
 416:	99 27       	eor	r25, r25
 418:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <UART_TxTail>
 41c:	fc 01       	movw	r30, r24
 41e:	e1 50       	subi	r30, 0x01	; 1
 420:	fc 4f       	sbci	r31, 0xFC	; 252
 422:	80 81       	ld	r24, Z
 424:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 428:	05 c0       	rjmp	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	e1 ec       	ldi	r30, 0xC1	; 193
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	80 83       	st	Z, r24
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <uart0_init>:
 446:	f8 94       	cli
 448:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <UART_TxHead>
 44c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <UART_TxTail>
 450:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <UART_RxHead>
 454:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <UART_RxTail>
 458:	78 94       	sei
 45a:	99 23       	and	r25, r25
 45c:	24 f4       	brge	.+8      	; 0x466 <uart0_init+0x20>
 45e:	22 e0       	ldi	r18, 0x02	; 2
 460:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 464:	9f 77       	andi	r25, 0x7F	; 127
 466:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 46a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 46e:	88 e9       	ldi	r24, 0x98	; 152
 470:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 47a:	08 95       	ret

0000047c <uart0_getc>:
 47c:	f8 94       	cli
 47e:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <UART_RxHead>
 482:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <UART_RxTail>
 486:	98 13       	cpse	r25, r24
 488:	04 c0       	rjmp	.+8      	; 0x492 <uart0_getc+0x16>
 48a:	78 94       	sei
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	08 95       	ret
 492:	78 94       	sei
 494:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <UART_RxTail>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	8f 77       	andi	r24, 0x7F	; 127
 49e:	99 27       	eor	r25, r25
 4a0:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <UART_RxTail>
 4a4:	fc 01       	movw	r30, r24
 4a6:	e1 58       	subi	r30, 0x81	; 129
 4a8:	fc 4f       	sbci	r31, 0xFC	; 252
 4aa:	20 81       	ld	r18, Z
 4ac:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <UART_LastRxError>
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	98 2f       	mov	r25, r24
 4b4:	88 27       	eor	r24, r24
 4b6:	82 0f       	add	r24, r18
 4b8:	91 1d       	adc	r25, r1
 4ba:	08 95       	ret

000004bc <uart0_putc>:
 4bc:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <UART_TxHead>
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	4f 77       	andi	r20, 0x7F	; 127
 4c8:	55 27       	eor	r21, r21
 4ca:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <UART_TxTail>
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	42 17       	cp	r20, r18
 4d2:	53 07       	cpc	r21, r19
 4d4:	d1 f3       	breq	.-12     	; 0x4ca <uart0_putc+0xe>
 4d6:	fa 01       	movw	r30, r20
 4d8:	e1 50       	subi	r30, 0x01	; 1
 4da:	fc 4f       	sbci	r31, 0xFC	; 252
 4dc:	80 83       	st	Z, r24
 4de:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <UART_TxHead>
 4e2:	e1 ec       	ldi	r30, 0xC1	; 193
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	80 62       	ori	r24, 0x20	; 32
 4ea:	80 83       	st	Z, r24
 4ec:	08 95       	ret

000004ee <uart0_puts>:
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
 4f4:	88 81       	ld	r24, Y
 4f6:	88 23       	and	r24, r24
 4f8:	31 f0       	breq	.+12     	; 0x506 <uart0_puts+0x18>
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <uart0_putc>
 500:	89 91       	ld	r24, Y+
 502:	81 11       	cpse	r24, r1
 504:	fb cf       	rjmp	.-10     	; 0x4fc <uart0_puts+0xe>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <uart0_available>:
 50c:	f8 94       	cli
 50e:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <UART_RxHead>
 512:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <UART_RxTail>
 516:	78 94       	sei
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	80 58       	subi	r24, 0x80	; 128
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	82 1b       	sub	r24, r18
 520:	91 09       	sbc	r25, r1
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	99 27       	eor	r25, r25
 526:	08 95       	ret

00000528 <uart0_errchk>:
Input:    None
Returns:  boolean false if no error was found; true if an error occured
**************************************************************************/
uint16_t uart0_errchk(uint16_t rec_val){
	
	if (rec_val & UART_FRAME_ERROR ){
 528:	93 ff       	sbrs	r25, 3
 52a:	07 c0       	rjmp	.+14     	; 0x53a <uart0_errchk+0x12>
		uart0_puts("UART_FRAME_ERROR occurred!");
 52c:	87 ee       	ldi	r24, 0xE7	; 231
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		return UART_FRAME_ERROR;
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	38 e0       	ldi	r19, 0x08	; 8
 538:	1d c0       	rjmp	.+58     	; 0x574 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_OVERRUN_ERROR){
 53a:	92 ff       	sbrs	r25, 2
 53c:	07 c0       	rjmp	.+14     	; 0x54c <uart0_errchk+0x24>
		uart0_puts("UART_OVERRUN_ERROR occurred!");
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		return UART_OVERRUN_ERROR;
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	34 e0       	ldi	r19, 0x04	; 4
 54a:	14 c0       	rjmp	.+40     	; 0x574 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_BUFFER_OVERFLOW){
 54c:	91 ff       	sbrs	r25, 1
 54e:	07 c0       	rjmp	.+14     	; 0x55e <uart0_errchk+0x36>
		uart0_puts("UART_BUFFER_OVERFLOW occurred!");
 550:	8f e1       	ldi	r24, 0x1F	; 31
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		return UART_BUFFER_OVERFLOW;
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	32 e0       	ldi	r19, 0x02	; 2
 55c:	0b c0       	rjmp	.+22     	; 0x574 <uart0_errchk+0x4c>
	}
	else if (rec_val & UART_NO_DATA){
 55e:	9c 01       	movw	r18, r24
 560:	22 27       	eor	r18, r18
 562:	31 70       	andi	r19, 0x01	; 1
 564:	90 ff       	sbrs	r25, 0
 566:	06 c0       	rjmp	.+12     	; 0x574 <uart0_errchk+0x4c>
		uart0_puts("UART_NO_DATA occurred!");
 568:	8e e3       	ldi	r24, 0x3E	; 62
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
		return UART_NO_DATA;
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	31 e0       	ldi	r19, 0x01	; 1
	}
	return 0;
}
 574:	c9 01       	movw	r24, r18
 576:	08 95       	ret

00000578 <uart0_getln>:
Returns:  0x00 no bytes available
		  0x01 one line was read successfully
		  0x02 UART transmit Error occurred
**************************************************************************/
uint16_t uart0_getln(char* uart0_line_buf)
{
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	8c 01       	movw	r16, r24
	if (uart0_available() > 0){
 588:	0e 94 86 02 	call	0x50c	; 0x50c <uart0_available>
 58c:	ec 01       	movw	r28, r24
 58e:	89 2b       	or	r24, r25
 590:	09 f4       	brne	.+2      	; 0x594 <uart0_getln+0x1c>
 592:	41 c0       	rjmp	.+130    	; 0x616 <uart0_getln+0x9e>
		static uint8_t uart0_line_buf_len = 0;
		
		uint16_t rec_val;		//received value
		char rec_c;				//received character
		
		rec_val = uart0_getc();
 594:	0e 94 3e 02 	call	0x47c	; 0x47c <uart0_getc>
 598:	f8 2e       	mov	r15, r24
 59a:	d9 2e       	mov	r13, r25
		rec_c = (char)rec_val;	//lower 8 bit
		
		//Check for receive errors
		if ( uart0_errchk(rec_val) ){
 59c:	0e 94 94 02 	call	0x528	; 0x528 <uart0_errchk>
 5a0:	ec 01       	movw	r28, r24
 5a2:	89 2b       	or	r24, r25
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <uart0_getln+0x3a>
			return uart0_errchk(rec_val);
 5a6:	8f 2d       	mov	r24, r15
 5a8:	9d 2d       	mov	r25, r13
 5aa:	0e 94 94 02 	call	0x528	; 0x528 <uart0_errchk>
 5ae:	ec 01       	movw	r28, r24
 5b0:	32 c0       	rjmp	.+100    	; 0x616 <uart0_getln+0x9e>
		}

		// Process character
		// mit peak \n\r abfangen!
		
		if ( rec_c == LINE_DELIMITER ){
 5b2:	8d e0       	ldi	r24, 0x0D	; 13
 5b4:	f8 12       	cpse	r15, r24
 5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <uart0_getln+0x5c>
			//EOL reached
			
			if (uart0_line_buf_len != 0){
 5b8:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <uart0_line_buf_len.1916>
 5bc:	88 23       	and	r24, r24
 5be:	29 f0       	breq	.+10     	; 0x5ca <uart0_getln+0x52>
				//reset buffer index
				uart0_line_buf_len = 0;
 5c0:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <uart0_line_buf_len.1916>
			else{
				//first character was a delimiter -> set terminator to first buffer index
				//(empty string)
				uart0_line_buf[uart0_line_buf_len] = 0;
			}
			return 0x01;
 5c4:	c1 e0       	ldi	r28, 0x01	; 1
 5c6:	d0 e0       	ldi	r29, 0x00	; 0
 5c8:	26 c0       	rjmp	.+76     	; 0x616 <uart0_getln+0x9e>
				uart0_line_buf_len = 0;
			}
			else{
				//first character was a delimiter -> set terminator to first buffer index
				//(empty string)
				uart0_line_buf[uart0_line_buf_len] = 0;
 5ca:	f8 01       	movw	r30, r16
 5cc:	10 82       	st	Z, r1
			}
			return 0x01;
 5ce:	c1 e0       	ldi	r28, 0x01	; 1
 5d0:	d0 e0       	ldi	r29, 0x00	; 0
 5d2:	21 c0       	rjmp	.+66     	; 0x616 <uart0_getln+0x9e>
		}
		else {
			//EOL not reached 
			
			//Ignore backspace and "DEL" (=127)
			if ( rec_c == '\b' || rec_c == 127 ){
 5d4:	f8 e0       	ldi	r31, 0x08	; 8
 5d6:	ff 16       	cp	r15, r31
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <uart0_getln+0x68>
 5da:	8f e7       	ldi	r24, 0x7F	; 127
 5dc:	f8 12       	cpse	r15, r24
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <uart0_getln+0x74>
				//delete the most recent character
				uart0_line_buf_len--;
 5e0:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <uart0_line_buf_len.1916>
 5e4:	81 50       	subi	r24, 0x01	; 1
 5e6:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <uart0_line_buf_len.1916>
 5ea:	15 c0       	rjmp	.+42     	; 0x616 <uart0_getln+0x9e>
			}
			else{
				//-> store to buffer
				if(uart0_line_buf_len < LINE_BUF_SIZE){
 5ec:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <uart0_line_buf_len.1916>
 5f0:	80 35       	cpi	r24, 0x50	; 80
 5f2:	68 f4       	brcc	.+26     	; 0x60e <uart0_getln+0x96>
					uart0_line_buf[uart0_line_buf_len++] = rec_c;
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	98 0f       	add	r25, r24
 5f8:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <uart0_line_buf_len.1916>
 5fc:	f8 01       	movw	r30, r16
 5fe:	e8 0f       	add	r30, r24
 600:	f1 1d       	adc	r31, r1
 602:	f0 82       	st	Z, r15
					uart0_line_buf[uart0_line_buf_len] = 0; // append the null terminator
 604:	f8 01       	movw	r30, r16
 606:	e9 0f       	add	r30, r25
 608:	f1 1d       	adc	r31, r1
 60a:	10 82       	st	Z, r1
 60c:	04 c0       	rjmp	.+8      	; 0x616 <uart0_getln+0x9e>
				}
				else{
					//buffer full -> print error message
					uart0_puts("Line length exceeds buffer!");
 60e:	85 e5       	ldi	r24, 0x55	; 85
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart0_puts>
				}
			}
		}
	}
	return 0x00;
}
 616:	ce 01       	movw	r24, r28
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	df 90       	pop	r13
 626:	08 95       	ret

00000628 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	2f 93       	push	r18
 634:	3f 93       	push	r19
 636:	4f 93       	push	r20
 638:	5f 93       	push	r21
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
 642:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UART1_DATA;
 646:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
 64a:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
 64c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <UART1_RxHead>
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	8f 77       	andi	r24, 0x7F	; 127
 656:	99 27       	eor	r25, r25

	if (tmphead == UART1_RxTail) {
 658:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <UART1_RxTail>
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	84 17       	cp	r24, r20
 660:	95 07       	cpc	r25, r21
 662:	39 f0       	breq	.+14     	; 0x672 <__vector_28+0x4a>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
 664:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
 668:	fc 01       	movw	r30, r24
 66a:	e6 58       	subi	r30, 0x86	; 134
 66c:	fd 4f       	sbci	r31, 0xFD	; 253
 66e:	30 83       	st	Z, r19
 670:	01 c0       	rjmp	.+2      	; 0x674 <__vector_28+0x4c>
	/* calculate buffer index */
	tmphead = (UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if (tmphead == UART1_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 672:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
 674:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <UART1_LastRxError>
}
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	uint16_t tmptail;

	if (UART1_TxHead != UART1_TxTail) {
 6a4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <UART1_TxHead>
 6a8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <UART1_TxTail>
 6ac:	98 17       	cp	r25, r24
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__vector_29+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
 6b0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <UART1_TxTail>
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	8f 77       	andi	r24, 0x7F	; 127
 6ba:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
 6bc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <UART1_TxTail>
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 6c0:	fc 01       	movw	r30, r24
 6c2:	e6 50       	subi	r30, 0x06	; 6
 6c4:	fd 4f       	sbci	r31, 0xFD	; 253
 6c6:	80 81       	ld	r24, Z
 6c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__vector_29+0x46>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
 6ce:	e9 ec       	ldi	r30, 0xC9	; 201
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	8f 7d       	andi	r24, 0xDF	; 223
 6d6:	80 83       	st	Z, r24
	}
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <uart1_init>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6ea:	f8 94       	cli
Returns:  none
**************************************************************************/
void uart1_init(uint16_t baudrate)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {	
		UART1_TxHead = 0;
 6ec:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <UART1_TxHead>
		UART1_TxTail = 0;
 6f0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <UART1_TxTail>
		UART1_RxHead = 0;
 6f4:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <UART1_RxHead>
		UART1_RxTail = 0;
 6f8:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <UART1_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6fc:	78 94       	sei
	}

	/* Set baud rate */
	if (baudrate & 0x8000) {
 6fe:	99 23       	and	r25, r25
 700:	24 f4       	brge	.+8      	; 0x70a <uart1_init+0x20>
		UART1_STATUS = (1<<U2X1);  //Enable 2x speed
 702:	22 e0       	ldi	r18, 0x02	; 2
 704:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		baudrate &= ~0x8000;
 708:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR1H = (uint8_t) (baudrate>>8);
 70a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t) baudrate;
 70e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 712:	88 e9       	ldi	r24, 0x98	; 152
 714:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	#ifdef URSEL1
		UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
	#else
		UCSR1C = (3<<UCSZ10);
 718:	86 e0       	ldi	r24, 0x06	; 6
 71a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 71e:	08 95       	ret

00000720 <malloc>:
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	82 30       	cpi	r24, 0x02	; 2
 72a:	91 05       	cpc	r25, r1
 72c:	10 f4       	brcc	.+4      	; 0x732 <malloc+0x12>
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <__flp>
 736:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <__flp+0x1>
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	a0 e0       	ldi	r26, 0x00	; 0
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	30 97       	sbiw	r30, 0x00	; 0
 744:	19 f1       	breq	.+70     	; 0x78c <malloc+0x6c>
 746:	40 81       	ld	r20, Z
 748:	51 81       	ldd	r21, Z+1	; 0x01
 74a:	02 81       	ldd	r16, Z+2	; 0x02
 74c:	13 81       	ldd	r17, Z+3	; 0x03
 74e:	48 17       	cp	r20, r24
 750:	59 07       	cpc	r21, r25
 752:	c8 f0       	brcs	.+50     	; 0x786 <malloc+0x66>
 754:	84 17       	cp	r24, r20
 756:	95 07       	cpc	r25, r21
 758:	69 f4       	brne	.+26     	; 0x774 <malloc+0x54>
 75a:	10 97       	sbiw	r26, 0x00	; 0
 75c:	31 f0       	breq	.+12     	; 0x76a <malloc+0x4a>
 75e:	12 96       	adiw	r26, 0x02	; 2
 760:	0c 93       	st	X, r16
 762:	12 97       	sbiw	r26, 0x02	; 2
 764:	13 96       	adiw	r26, 0x03	; 3
 766:	1c 93       	st	X, r17
 768:	27 c0       	rjmp	.+78     	; 0x7b8 <malloc+0x98>
 76a:	00 93 d1 04 	sts	0x04D1, r16	; 0x8004d1 <__flp>
 76e:	10 93 d2 04 	sts	0x04D2, r17	; 0x8004d2 <__flp+0x1>
 772:	22 c0       	rjmp	.+68     	; 0x7b8 <malloc+0x98>
 774:	21 15       	cp	r18, r1
 776:	31 05       	cpc	r19, r1
 778:	19 f0       	breq	.+6      	; 0x780 <malloc+0x60>
 77a:	42 17       	cp	r20, r18
 77c:	53 07       	cpc	r21, r19
 77e:	18 f4       	brcc	.+6      	; 0x786 <malloc+0x66>
 780:	9a 01       	movw	r18, r20
 782:	bd 01       	movw	r22, r26
 784:	ef 01       	movw	r28, r30
 786:	df 01       	movw	r26, r30
 788:	f8 01       	movw	r30, r16
 78a:	db cf       	rjmp	.-74     	; 0x742 <malloc+0x22>
 78c:	21 15       	cp	r18, r1
 78e:	31 05       	cpc	r19, r1
 790:	f9 f0       	breq	.+62     	; 0x7d0 <malloc+0xb0>
 792:	28 1b       	sub	r18, r24
 794:	39 0b       	sbc	r19, r25
 796:	24 30       	cpi	r18, 0x04	; 4
 798:	31 05       	cpc	r19, r1
 79a:	80 f4       	brcc	.+32     	; 0x7bc <malloc+0x9c>
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	9b 81       	ldd	r25, Y+3	; 0x03
 7a0:	61 15       	cp	r22, r1
 7a2:	71 05       	cpc	r23, r1
 7a4:	21 f0       	breq	.+8      	; 0x7ae <malloc+0x8e>
 7a6:	fb 01       	movw	r30, r22
 7a8:	93 83       	std	Z+3, r25	; 0x03
 7aa:	82 83       	std	Z+2, r24	; 0x02
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <malloc+0x96>
 7ae:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <__flp+0x1>
 7b2:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <__flp>
 7b6:	fe 01       	movw	r30, r28
 7b8:	32 96       	adiw	r30, 0x02	; 2
 7ba:	44 c0       	rjmp	.+136    	; 0x844 <malloc+0x124>
 7bc:	fe 01       	movw	r30, r28
 7be:	e2 0f       	add	r30, r18
 7c0:	f3 1f       	adc	r31, r19
 7c2:	81 93       	st	Z+, r24
 7c4:	91 93       	st	Z+, r25
 7c6:	22 50       	subi	r18, 0x02	; 2
 7c8:	31 09       	sbc	r19, r1
 7ca:	39 83       	std	Y+1, r19	; 0x01
 7cc:	28 83       	st	Y, r18
 7ce:	3a c0       	rjmp	.+116    	; 0x844 <malloc+0x124>
 7d0:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
 7d4:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
 7d8:	23 2b       	or	r18, r19
 7da:	41 f4       	brne	.+16     	; 0x7ec <malloc+0xcc>
 7dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7e4:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <__brkval+0x1>
 7e8:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <__brkval>
 7ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7f4:	21 15       	cp	r18, r1
 7f6:	31 05       	cpc	r19, r1
 7f8:	41 f4       	brne	.+16     	; 0x80a <malloc+0xea>
 7fa:	2d b7       	in	r18, 0x3d	; 61
 7fc:	3e b7       	in	r19, 0x3e	; 62
 7fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 802:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 806:	24 1b       	sub	r18, r20
 808:	35 0b       	sbc	r19, r21
 80a:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <__brkval>
 80e:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <__brkval+0x1>
 812:	e2 17       	cp	r30, r18
 814:	f3 07       	cpc	r31, r19
 816:	a0 f4       	brcc	.+40     	; 0x840 <malloc+0x120>
 818:	2e 1b       	sub	r18, r30
 81a:	3f 0b       	sbc	r19, r31
 81c:	28 17       	cp	r18, r24
 81e:	39 07       	cpc	r19, r25
 820:	78 f0       	brcs	.+30     	; 0x840 <malloc+0x120>
 822:	ac 01       	movw	r20, r24
 824:	4e 5f       	subi	r20, 0xFE	; 254
 826:	5f 4f       	sbci	r21, 0xFF	; 255
 828:	24 17       	cp	r18, r20
 82a:	35 07       	cpc	r19, r21
 82c:	48 f0       	brcs	.+18     	; 0x840 <malloc+0x120>
 82e:	4e 0f       	add	r20, r30
 830:	5f 1f       	adc	r21, r31
 832:	50 93 d0 04 	sts	0x04D0, r21	; 0x8004d0 <__brkval+0x1>
 836:	40 93 cf 04 	sts	0x04CF, r20	; 0x8004cf <__brkval>
 83a:	81 93       	st	Z+, r24
 83c:	91 93       	st	Z+, r25
 83e:	02 c0       	rjmp	.+4      	; 0x844 <malloc+0x124>
 840:	e0 e0       	ldi	r30, 0x00	; 0
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	cf 01       	movw	r24, r30
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	08 95       	ret

00000850 <free>:
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	09 f4       	brne	.+2      	; 0x85a <free+0xa>
 858:	81 c0       	rjmp	.+258    	; 0x95c <__stack+0x5d>
 85a:	fc 01       	movw	r30, r24
 85c:	32 97       	sbiw	r30, 0x02	; 2
 85e:	13 82       	std	Z+3, r1	; 0x03
 860:	12 82       	std	Z+2, r1	; 0x02
 862:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <__flp>
 866:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <__flp+0x1>
 86a:	10 97       	sbiw	r26, 0x00	; 0
 86c:	81 f4       	brne	.+32     	; 0x88e <free+0x3e>
 86e:	20 81       	ld	r18, Z
 870:	31 81       	ldd	r19, Z+1	; 0x01
 872:	82 0f       	add	r24, r18
 874:	93 1f       	adc	r25, r19
 876:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
 87a:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
 87e:	28 17       	cp	r18, r24
 880:	39 07       	cpc	r19, r25
 882:	51 f5       	brne	.+84     	; 0x8d8 <free+0x88>
 884:	f0 93 d0 04 	sts	0x04D0, r31	; 0x8004d0 <__brkval+0x1>
 888:	e0 93 cf 04 	sts	0x04CF, r30	; 0x8004cf <__brkval>
 88c:	67 c0       	rjmp	.+206    	; 0x95c <__stack+0x5d>
 88e:	ed 01       	movw	r28, r26
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	ce 17       	cp	r28, r30
 896:	df 07       	cpc	r29, r31
 898:	40 f4       	brcc	.+16     	; 0x8aa <free+0x5a>
 89a:	4a 81       	ldd	r20, Y+2	; 0x02
 89c:	5b 81       	ldd	r21, Y+3	; 0x03
 89e:	9e 01       	movw	r18, r28
 8a0:	41 15       	cp	r20, r1
 8a2:	51 05       	cpc	r21, r1
 8a4:	f1 f0       	breq	.+60     	; 0x8e2 <free+0x92>
 8a6:	ea 01       	movw	r28, r20
 8a8:	f5 cf       	rjmp	.-22     	; 0x894 <free+0x44>
 8aa:	d3 83       	std	Z+3, r29	; 0x03
 8ac:	c2 83       	std	Z+2, r28	; 0x02
 8ae:	40 81       	ld	r20, Z
 8b0:	51 81       	ldd	r21, Z+1	; 0x01
 8b2:	84 0f       	add	r24, r20
 8b4:	95 1f       	adc	r25, r21
 8b6:	c8 17       	cp	r28, r24
 8b8:	d9 07       	cpc	r29, r25
 8ba:	59 f4       	brne	.+22     	; 0x8d2 <free+0x82>
 8bc:	88 81       	ld	r24, Y
 8be:	99 81       	ldd	r25, Y+1	; 0x01
 8c0:	84 0f       	add	r24, r20
 8c2:	95 1f       	adc	r25, r21
 8c4:	02 96       	adiw	r24, 0x02	; 2
 8c6:	91 83       	std	Z+1, r25	; 0x01
 8c8:	80 83       	st	Z, r24
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	9b 81       	ldd	r25, Y+3	; 0x03
 8ce:	93 83       	std	Z+3, r25	; 0x03
 8d0:	82 83       	std	Z+2, r24	; 0x02
 8d2:	21 15       	cp	r18, r1
 8d4:	31 05       	cpc	r19, r1
 8d6:	29 f4       	brne	.+10     	; 0x8e2 <free+0x92>
 8d8:	f0 93 d2 04 	sts	0x04D2, r31	; 0x8004d2 <__flp+0x1>
 8dc:	e0 93 d1 04 	sts	0x04D1, r30	; 0x8004d1 <__flp>
 8e0:	3d c0       	rjmp	.+122    	; 0x95c <__stack+0x5d>
 8e2:	e9 01       	movw	r28, r18
 8e4:	fb 83       	std	Y+3, r31	; 0x03
 8e6:	ea 83       	std	Y+2, r30	; 0x02
 8e8:	49 91       	ld	r20, Y+
 8ea:	59 91       	ld	r21, Y+
 8ec:	c4 0f       	add	r28, r20
 8ee:	d5 1f       	adc	r29, r21
 8f0:	ec 17       	cp	r30, r28
 8f2:	fd 07       	cpc	r31, r29
 8f4:	61 f4       	brne	.+24     	; 0x90e <__stack+0xf>
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	02 96       	adiw	r24, 0x02	; 2
 900:	e9 01       	movw	r28, r18
 902:	99 83       	std	Y+1, r25	; 0x01
 904:	88 83       	st	Y, r24
 906:	82 81       	ldd	r24, Z+2	; 0x02
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	9b 83       	std	Y+3, r25	; 0x03
 90c:	8a 83       	std	Y+2, r24	; 0x02
 90e:	e0 e0       	ldi	r30, 0x00	; 0
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	12 96       	adiw	r26, 0x02	; 2
 914:	8d 91       	ld	r24, X+
 916:	9c 91       	ld	r25, X
 918:	13 97       	sbiw	r26, 0x03	; 3
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	19 f0       	breq	.+6      	; 0x924 <__stack+0x25>
 91e:	fd 01       	movw	r30, r26
 920:	dc 01       	movw	r26, r24
 922:	f7 cf       	rjmp	.-18     	; 0x912 <__stack+0x13>
 924:	8d 91       	ld	r24, X+
 926:	9c 91       	ld	r25, X
 928:	11 97       	sbiw	r26, 0x01	; 1
 92a:	9d 01       	movw	r18, r26
 92c:	2e 5f       	subi	r18, 0xFE	; 254
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	82 0f       	add	r24, r18
 932:	93 1f       	adc	r25, r19
 934:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
 938:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
 93c:	28 17       	cp	r18, r24
 93e:	39 07       	cpc	r19, r25
 940:	69 f4       	brne	.+26     	; 0x95c <__stack+0x5d>
 942:	30 97       	sbiw	r30, 0x00	; 0
 944:	29 f4       	brne	.+10     	; 0x950 <__stack+0x51>
 946:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <__flp+0x1>
 94a:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <__flp>
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
 950:	13 82       	std	Z+3, r1	; 0x03
 952:	12 82       	std	Z+2, r1	; 0x02
 954:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <__brkval+0x1>
 958:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <__brkval>
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	08 95       	ret

00000962 <strtok>:
 962:	42 e7       	ldi	r20, 0x72	; 114
 964:	52 e0       	ldi	r21, 0x02	; 2
 966:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <strtok_r>
 96a:	08 95       	ret

0000096c <strcmp>:
 96c:	fb 01       	movw	r30, r22
 96e:	dc 01       	movw	r26, r24
 970:	8d 91       	ld	r24, X+
 972:	01 90       	ld	r0, Z+
 974:	80 19       	sub	r24, r0
 976:	01 10       	cpse	r0, r1
 978:	d9 f3       	breq	.-10     	; 0x970 <strcmp+0x4>
 97a:	99 0b       	sbc	r25, r25
 97c:	08 95       	ret

0000097e <strcpy>:
 97e:	fb 01       	movw	r30, r22
 980:	dc 01       	movw	r26, r24
 982:	01 90       	ld	r0, Z+
 984:	0d 92       	st	X+, r0
 986:	00 20       	and	r0, r0
 988:	e1 f7       	brne	.-8      	; 0x982 <strcpy+0x4>
 98a:	08 95       	ret

0000098c <strlwr>:
 98c:	dc 01       	movw	r26, r24
 98e:	6c 91       	ld	r22, X
 990:	61 54       	subi	r22, 0x41	; 65
 992:	6a 31       	cpi	r22, 0x1A	; 26
 994:	08 f0       	brcs	.+2      	; 0x998 <strlwr+0xc>
 996:	60 52       	subi	r22, 0x20	; 32
 998:	6f 59       	subi	r22, 0x9F	; 159
 99a:	6d 93       	st	X+, r22
 99c:	c1 f7       	brne	.-16     	; 0x98e <strlwr+0x2>
 99e:	08 95       	ret

000009a0 <strtok_r>:
 9a0:	fa 01       	movw	r30, r20
 9a2:	a1 91       	ld	r26, Z+
 9a4:	b0 81       	ld	r27, Z
 9a6:	00 97       	sbiw	r24, 0x00	; 0
 9a8:	19 f4       	brne	.+6      	; 0x9b0 <strtok_r+0x10>
 9aa:	10 97       	sbiw	r26, 0x00	; 0
 9ac:	e1 f0       	breq	.+56     	; 0x9e6 <strtok_r+0x46>
 9ae:	cd 01       	movw	r24, r26
 9b0:	dc 01       	movw	r26, r24
 9b2:	cd 01       	movw	r24, r26
 9b4:	0d 90       	ld	r0, X+
 9b6:	00 20       	and	r0, r0
 9b8:	11 f4       	brne	.+4      	; 0x9be <strtok_r+0x1e>
 9ba:	c0 01       	movw	r24, r0
 9bc:	13 c0       	rjmp	.+38     	; 0x9e4 <strtok_r+0x44>
 9be:	fb 01       	movw	r30, r22
 9c0:	21 91       	ld	r18, Z+
 9c2:	22 23       	and	r18, r18
 9c4:	19 f0       	breq	.+6      	; 0x9cc <strtok_r+0x2c>
 9c6:	20 15       	cp	r18, r0
 9c8:	d9 f7       	brne	.-10     	; 0x9c0 <strtok_r+0x20>
 9ca:	f3 cf       	rjmp	.-26     	; 0x9b2 <strtok_r+0x12>
 9cc:	fb 01       	movw	r30, r22
 9ce:	21 91       	ld	r18, Z+
 9d0:	20 15       	cp	r18, r0
 9d2:	19 f4       	brne	.+6      	; 0x9da <strtok_r+0x3a>
 9d4:	1e 92       	st	-X, r1
 9d6:	11 96       	adiw	r26, 0x01	; 1
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <strtok_r+0x46>
 9da:	22 23       	and	r18, r18
 9dc:	c1 f7       	brne	.-16     	; 0x9ce <strtok_r+0x2e>
 9de:	0d 90       	ld	r0, X+
 9e0:	00 20       	and	r0, r0
 9e2:	a1 f7       	brne	.-24     	; 0x9cc <strtok_r+0x2c>
 9e4:	d0 01       	movw	r26, r0
 9e6:	fa 01       	movw	r30, r20
 9e8:	a1 93       	st	Z+, r26
 9ea:	b0 83       	st	Z, r27
 9ec:	08 95       	ret

000009ee <__itoa_ncheck>:
 9ee:	bb 27       	eor	r27, r27
 9f0:	4a 30       	cpi	r20, 0x0A	; 10
 9f2:	31 f4       	brne	.+12     	; 0xa00 <__itoa_ncheck+0x12>
 9f4:	99 23       	and	r25, r25
 9f6:	22 f4       	brpl	.+8      	; 0xa00 <__itoa_ncheck+0x12>
 9f8:	bd e2       	ldi	r27, 0x2D	; 45
 9fa:	90 95       	com	r25
 9fc:	81 95       	neg	r24
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__utoa_common>

00000a04 <__utoa_ncheck>:
 a04:	bb 27       	eor	r27, r27

00000a06 <__utoa_common>:
 a06:	fb 01       	movw	r30, r22
 a08:	55 27       	eor	r21, r21
 a0a:	aa 27       	eor	r26, r26
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	aa 1f       	adc	r26, r26
 a12:	a4 17       	cp	r26, r20
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__utoa_common+0x14>
 a16:	a4 1b       	sub	r26, r20
 a18:	83 95       	inc	r24
 a1a:	50 51       	subi	r21, 0x10	; 16
 a1c:	b9 f7       	brne	.-18     	; 0xa0c <__utoa_common+0x6>
 a1e:	a0 5d       	subi	r26, 0xD0	; 208
 a20:	aa 33       	cpi	r26, 0x3A	; 58
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__utoa_common+0x20>
 a24:	a9 5d       	subi	r26, 0xD9	; 217
 a26:	a1 93       	st	Z+, r26
 a28:	00 97       	sbiw	r24, 0x00	; 0
 a2a:	79 f7       	brne	.-34     	; 0xa0a <__utoa_common+0x4>
 a2c:	b1 11       	cpse	r27, r1
 a2e:	b1 93       	st	Z+, r27
 a30:	11 92       	st	Z+, r1
 a32:	cb 01       	movw	r24, r22
 a34:	0c 94 13 07 	jmp	0xe26	; 0xe26 <strrev>

00000a38 <vfprintf>:
 a38:	ab e0       	ldi	r26, 0x0B	; 11
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
 a3c:	e2 e2       	ldi	r30, 0x22	; 34
 a3e:	f5 e0       	ldi	r31, 0x05	; 5
 a40:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__prologue_saves__>
 a44:	6c 01       	movw	r12, r24
 a46:	7b 01       	movw	r14, r22
 a48:	8a 01       	movw	r16, r20
 a4a:	fc 01       	movw	r30, r24
 a4c:	17 82       	std	Z+7, r1	; 0x07
 a4e:	16 82       	std	Z+6, r1	; 0x06
 a50:	83 81       	ldd	r24, Z+3	; 0x03
 a52:	81 ff       	sbrs	r24, 1
 a54:	cc c1       	rjmp	.+920    	; 0xdee <vfprintf+0x3b6>
 a56:	ce 01       	movw	r24, r28
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	3c 01       	movw	r6, r24
 a5c:	f6 01       	movw	r30, r12
 a5e:	93 81       	ldd	r25, Z+3	; 0x03
 a60:	f7 01       	movw	r30, r14
 a62:	93 fd       	sbrc	r25, 3
 a64:	85 91       	lpm	r24, Z+
 a66:	93 ff       	sbrs	r25, 3
 a68:	81 91       	ld	r24, Z+
 a6a:	7f 01       	movw	r14, r30
 a6c:	88 23       	and	r24, r24
 a6e:	09 f4       	brne	.+2      	; 0xa72 <vfprintf+0x3a>
 a70:	ba c1       	rjmp	.+884    	; 0xde6 <vfprintf+0x3ae>
 a72:	85 32       	cpi	r24, 0x25	; 37
 a74:	39 f4       	brne	.+14     	; 0xa84 <vfprintf+0x4c>
 a76:	93 fd       	sbrc	r25, 3
 a78:	85 91       	lpm	r24, Z+
 a7a:	93 ff       	sbrs	r25, 3
 a7c:	81 91       	ld	r24, Z+
 a7e:	7f 01       	movw	r14, r30
 a80:	85 32       	cpi	r24, 0x25	; 37
 a82:	29 f4       	brne	.+10     	; 0xa8e <vfprintf+0x56>
 a84:	b6 01       	movw	r22, r12
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 a8c:	e7 cf       	rjmp	.-50     	; 0xa5c <vfprintf+0x24>
 a8e:	91 2c       	mov	r9, r1
 a90:	21 2c       	mov	r2, r1
 a92:	31 2c       	mov	r3, r1
 a94:	ff e1       	ldi	r31, 0x1F	; 31
 a96:	f3 15       	cp	r31, r3
 a98:	d8 f0       	brcs	.+54     	; 0xad0 <vfprintf+0x98>
 a9a:	8b 32       	cpi	r24, 0x2B	; 43
 a9c:	79 f0       	breq	.+30     	; 0xabc <vfprintf+0x84>
 a9e:	38 f4       	brcc	.+14     	; 0xaae <vfprintf+0x76>
 aa0:	80 32       	cpi	r24, 0x20	; 32
 aa2:	79 f0       	breq	.+30     	; 0xac2 <vfprintf+0x8a>
 aa4:	83 32       	cpi	r24, 0x23	; 35
 aa6:	a1 f4       	brne	.+40     	; 0xad0 <vfprintf+0x98>
 aa8:	23 2d       	mov	r18, r3
 aaa:	20 61       	ori	r18, 0x10	; 16
 aac:	1d c0       	rjmp	.+58     	; 0xae8 <vfprintf+0xb0>
 aae:	8d 32       	cpi	r24, 0x2D	; 45
 ab0:	61 f0       	breq	.+24     	; 0xaca <vfprintf+0x92>
 ab2:	80 33       	cpi	r24, 0x30	; 48
 ab4:	69 f4       	brne	.+26     	; 0xad0 <vfprintf+0x98>
 ab6:	23 2d       	mov	r18, r3
 ab8:	21 60       	ori	r18, 0x01	; 1
 aba:	16 c0       	rjmp	.+44     	; 0xae8 <vfprintf+0xb0>
 abc:	83 2d       	mov	r24, r3
 abe:	82 60       	ori	r24, 0x02	; 2
 ac0:	38 2e       	mov	r3, r24
 ac2:	e3 2d       	mov	r30, r3
 ac4:	e4 60       	ori	r30, 0x04	; 4
 ac6:	3e 2e       	mov	r3, r30
 ac8:	2a c0       	rjmp	.+84     	; 0xb1e <vfprintf+0xe6>
 aca:	f3 2d       	mov	r31, r3
 acc:	f8 60       	ori	r31, 0x08	; 8
 ace:	1d c0       	rjmp	.+58     	; 0xb0a <vfprintf+0xd2>
 ad0:	37 fc       	sbrc	r3, 7
 ad2:	2d c0       	rjmp	.+90     	; 0xb2e <vfprintf+0xf6>
 ad4:	20 ed       	ldi	r18, 0xD0	; 208
 ad6:	28 0f       	add	r18, r24
 ad8:	2a 30       	cpi	r18, 0x0A	; 10
 ada:	40 f0       	brcs	.+16     	; 0xaec <vfprintf+0xb4>
 adc:	8e 32       	cpi	r24, 0x2E	; 46
 ade:	b9 f4       	brne	.+46     	; 0xb0e <vfprintf+0xd6>
 ae0:	36 fc       	sbrc	r3, 6
 ae2:	81 c1       	rjmp	.+770    	; 0xde6 <vfprintf+0x3ae>
 ae4:	23 2d       	mov	r18, r3
 ae6:	20 64       	ori	r18, 0x40	; 64
 ae8:	32 2e       	mov	r3, r18
 aea:	19 c0       	rjmp	.+50     	; 0xb1e <vfprintf+0xe6>
 aec:	36 fe       	sbrs	r3, 6
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0xc4>
 af0:	8a e0       	ldi	r24, 0x0A	; 10
 af2:	98 9e       	mul	r9, r24
 af4:	20 0d       	add	r18, r0
 af6:	11 24       	eor	r1, r1
 af8:	92 2e       	mov	r9, r18
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <vfprintf+0xe6>
 afc:	ea e0       	ldi	r30, 0x0A	; 10
 afe:	2e 9e       	mul	r2, r30
 b00:	20 0d       	add	r18, r0
 b02:	11 24       	eor	r1, r1
 b04:	22 2e       	mov	r2, r18
 b06:	f3 2d       	mov	r31, r3
 b08:	f0 62       	ori	r31, 0x20	; 32
 b0a:	3f 2e       	mov	r3, r31
 b0c:	08 c0       	rjmp	.+16     	; 0xb1e <vfprintf+0xe6>
 b0e:	8c 36       	cpi	r24, 0x6C	; 108
 b10:	21 f4       	brne	.+8      	; 0xb1a <vfprintf+0xe2>
 b12:	83 2d       	mov	r24, r3
 b14:	80 68       	ori	r24, 0x80	; 128
 b16:	38 2e       	mov	r3, r24
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0xe6>
 b1a:	88 36       	cpi	r24, 0x68	; 104
 b1c:	41 f4       	brne	.+16     	; 0xb2e <vfprintf+0xf6>
 b1e:	f7 01       	movw	r30, r14
 b20:	93 fd       	sbrc	r25, 3
 b22:	85 91       	lpm	r24, Z+
 b24:	93 ff       	sbrs	r25, 3
 b26:	81 91       	ld	r24, Z+
 b28:	7f 01       	movw	r14, r30
 b2a:	81 11       	cpse	r24, r1
 b2c:	b3 cf       	rjmp	.-154    	; 0xa94 <vfprintf+0x5c>
 b2e:	98 2f       	mov	r25, r24
 b30:	9f 7d       	andi	r25, 0xDF	; 223
 b32:	95 54       	subi	r25, 0x45	; 69
 b34:	93 30       	cpi	r25, 0x03	; 3
 b36:	28 f4       	brcc	.+10     	; 0xb42 <vfprintf+0x10a>
 b38:	0c 5f       	subi	r16, 0xFC	; 252
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	9f e3       	ldi	r25, 0x3F	; 63
 b3e:	99 83       	std	Y+1, r25	; 0x01
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <vfprintf+0x124>
 b42:	83 36       	cpi	r24, 0x63	; 99
 b44:	31 f0       	breq	.+12     	; 0xb52 <vfprintf+0x11a>
 b46:	83 37       	cpi	r24, 0x73	; 115
 b48:	71 f0       	breq	.+28     	; 0xb66 <vfprintf+0x12e>
 b4a:	83 35       	cpi	r24, 0x53	; 83
 b4c:	09 f0       	breq	.+2      	; 0xb50 <vfprintf+0x118>
 b4e:	59 c0       	rjmp	.+178    	; 0xc02 <vfprintf+0x1ca>
 b50:	21 c0       	rjmp	.+66     	; 0xb94 <vfprintf+0x15c>
 b52:	f8 01       	movw	r30, r16
 b54:	80 81       	ld	r24, Z
 b56:	89 83       	std	Y+1, r24	; 0x01
 b58:	0e 5f       	subi	r16, 0xFE	; 254
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	88 24       	eor	r8, r8
 b5e:	83 94       	inc	r8
 b60:	91 2c       	mov	r9, r1
 b62:	53 01       	movw	r10, r6
 b64:	13 c0       	rjmp	.+38     	; 0xb8c <vfprintf+0x154>
 b66:	28 01       	movw	r4, r16
 b68:	f2 e0       	ldi	r31, 0x02	; 2
 b6a:	4f 0e       	add	r4, r31
 b6c:	51 1c       	adc	r5, r1
 b6e:	f8 01       	movw	r30, r16
 b70:	a0 80       	ld	r10, Z
 b72:	b1 80       	ldd	r11, Z+1	; 0x01
 b74:	36 fe       	sbrs	r3, 6
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <vfprintf+0x146>
 b78:	69 2d       	mov	r22, r9
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x14a>
 b7e:	6f ef       	ldi	r22, 0xFF	; 255
 b80:	7f ef       	ldi	r23, 0xFF	; 255
 b82:	c5 01       	movw	r24, r10
 b84:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
 b88:	4c 01       	movw	r8, r24
 b8a:	82 01       	movw	r16, r4
 b8c:	f3 2d       	mov	r31, r3
 b8e:	ff 77       	andi	r31, 0x7F	; 127
 b90:	3f 2e       	mov	r3, r31
 b92:	16 c0       	rjmp	.+44     	; 0xbc0 <vfprintf+0x188>
 b94:	28 01       	movw	r4, r16
 b96:	22 e0       	ldi	r18, 0x02	; 2
 b98:	42 0e       	add	r4, r18
 b9a:	51 1c       	adc	r5, r1
 b9c:	f8 01       	movw	r30, r16
 b9e:	a0 80       	ld	r10, Z
 ba0:	b1 80       	ldd	r11, Z+1	; 0x01
 ba2:	36 fe       	sbrs	r3, 6
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <vfprintf+0x174>
 ba6:	69 2d       	mov	r22, r9
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x178>
 bac:	6f ef       	ldi	r22, 0xFF	; 255
 bae:	7f ef       	ldi	r23, 0xFF	; 255
 bb0:	c5 01       	movw	r24, r10
 bb2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <strnlen_P>
 bb6:	4c 01       	movw	r8, r24
 bb8:	f3 2d       	mov	r31, r3
 bba:	f0 68       	ori	r31, 0x80	; 128
 bbc:	3f 2e       	mov	r3, r31
 bbe:	82 01       	movw	r16, r4
 bc0:	33 fc       	sbrc	r3, 3
 bc2:	1b c0       	rjmp	.+54     	; 0xbfa <vfprintf+0x1c2>
 bc4:	82 2d       	mov	r24, r2
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	88 16       	cp	r8, r24
 bca:	99 06       	cpc	r9, r25
 bcc:	b0 f4       	brcc	.+44     	; 0xbfa <vfprintf+0x1c2>
 bce:	b6 01       	movw	r22, r12
 bd0:	80 e2       	ldi	r24, 0x20	; 32
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 bd8:	2a 94       	dec	r2
 bda:	f4 cf       	rjmp	.-24     	; 0xbc4 <vfprintf+0x18c>
 bdc:	f5 01       	movw	r30, r10
 bde:	37 fc       	sbrc	r3, 7
 be0:	85 91       	lpm	r24, Z+
 be2:	37 fe       	sbrs	r3, 7
 be4:	81 91       	ld	r24, Z+
 be6:	5f 01       	movw	r10, r30
 be8:	b6 01       	movw	r22, r12
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 bf0:	21 10       	cpse	r2, r1
 bf2:	2a 94       	dec	r2
 bf4:	21 e0       	ldi	r18, 0x01	; 1
 bf6:	82 1a       	sub	r8, r18
 bf8:	91 08       	sbc	r9, r1
 bfa:	81 14       	cp	r8, r1
 bfc:	91 04       	cpc	r9, r1
 bfe:	71 f7       	brne	.-36     	; 0xbdc <vfprintf+0x1a4>
 c00:	e8 c0       	rjmp	.+464    	; 0xdd2 <vfprintf+0x39a>
 c02:	84 36       	cpi	r24, 0x64	; 100
 c04:	11 f0       	breq	.+4      	; 0xc0a <vfprintf+0x1d2>
 c06:	89 36       	cpi	r24, 0x69	; 105
 c08:	41 f5       	brne	.+80     	; 0xc5a <vfprintf+0x222>
 c0a:	f8 01       	movw	r30, r16
 c0c:	37 fe       	sbrs	r3, 7
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <vfprintf+0x1e6>
 c10:	60 81       	ld	r22, Z
 c12:	71 81       	ldd	r23, Z+1	; 0x01
 c14:	82 81       	ldd	r24, Z+2	; 0x02
 c16:	93 81       	ldd	r25, Z+3	; 0x03
 c18:	0c 5f       	subi	r16, 0xFC	; 252
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0x1f6>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	07 2e       	mov	r0, r23
 c24:	00 0c       	add	r0, r0
 c26:	88 0b       	sbc	r24, r24
 c28:	99 0b       	sbc	r25, r25
 c2a:	0e 5f       	subi	r16, 0xFE	; 254
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
 c2e:	f3 2d       	mov	r31, r3
 c30:	ff 76       	andi	r31, 0x6F	; 111
 c32:	3f 2e       	mov	r3, r31
 c34:	97 ff       	sbrs	r25, 7
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <vfprintf+0x212>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	f0 68       	ori	r31, 0x80	; 128
 c48:	3f 2e       	mov	r3, r31
 c4a:	2a e0       	ldi	r18, 0x0A	; 10
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	a3 01       	movw	r20, r6
 c50:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 c54:	88 2e       	mov	r8, r24
 c56:	86 18       	sub	r8, r6
 c58:	45 c0       	rjmp	.+138    	; 0xce4 <vfprintf+0x2ac>
 c5a:	85 37       	cpi	r24, 0x75	; 117
 c5c:	31 f4       	brne	.+12     	; 0xc6a <vfprintf+0x232>
 c5e:	23 2d       	mov	r18, r3
 c60:	2f 7e       	andi	r18, 0xEF	; 239
 c62:	b2 2e       	mov	r11, r18
 c64:	2a e0       	ldi	r18, 0x0A	; 10
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	25 c0       	rjmp	.+74     	; 0xcb4 <vfprintf+0x27c>
 c6a:	93 2d       	mov	r25, r3
 c6c:	99 7f       	andi	r25, 0xF9	; 249
 c6e:	b9 2e       	mov	r11, r25
 c70:	8f 36       	cpi	r24, 0x6F	; 111
 c72:	c1 f0       	breq	.+48     	; 0xca4 <vfprintf+0x26c>
 c74:	18 f4       	brcc	.+6      	; 0xc7c <vfprintf+0x244>
 c76:	88 35       	cpi	r24, 0x58	; 88
 c78:	79 f0       	breq	.+30     	; 0xc98 <vfprintf+0x260>
 c7a:	b5 c0       	rjmp	.+362    	; 0xde6 <vfprintf+0x3ae>
 c7c:	80 37       	cpi	r24, 0x70	; 112
 c7e:	19 f0       	breq	.+6      	; 0xc86 <vfprintf+0x24e>
 c80:	88 37       	cpi	r24, 0x78	; 120
 c82:	21 f0       	breq	.+8      	; 0xc8c <vfprintf+0x254>
 c84:	b0 c0       	rjmp	.+352    	; 0xde6 <vfprintf+0x3ae>
 c86:	e9 2f       	mov	r30, r25
 c88:	e0 61       	ori	r30, 0x10	; 16
 c8a:	be 2e       	mov	r11, r30
 c8c:	b4 fe       	sbrs	r11, 4
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vfprintf+0x272>
 c90:	fb 2d       	mov	r31, r11
 c92:	f4 60       	ori	r31, 0x04	; 4
 c94:	bf 2e       	mov	r11, r31
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <vfprintf+0x272>
 c98:	34 fe       	sbrs	r3, 4
 c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <vfprintf+0x278>
 c9c:	29 2f       	mov	r18, r25
 c9e:	26 60       	ori	r18, 0x06	; 6
 ca0:	b2 2e       	mov	r11, r18
 ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x278>
 ca4:	28 e0       	ldi	r18, 0x08	; 8
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x27c>
 caa:	20 e1       	ldi	r18, 0x10	; 16
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x27c>
 cb0:	20 e1       	ldi	r18, 0x10	; 16
 cb2:	32 e0       	ldi	r19, 0x02	; 2
 cb4:	f8 01       	movw	r30, r16
 cb6:	b7 fe       	sbrs	r11, 7
 cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x290>
 cba:	60 81       	ld	r22, Z
 cbc:	71 81       	ldd	r23, Z+1	; 0x01
 cbe:	82 81       	ldd	r24, Z+2	; 0x02
 cc0:	93 81       	ldd	r25, Z+3	; 0x03
 cc2:	0c 5f       	subi	r16, 0xFC	; 252
 cc4:	1f 4f       	sbci	r17, 0xFF	; 255
 cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <vfprintf+0x29c>
 cc8:	60 81       	ld	r22, Z
 cca:	71 81       	ldd	r23, Z+1	; 0x01
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 5f       	subi	r16, 0xFE	; 254
 cd2:	1f 4f       	sbci	r17, 0xFF	; 255
 cd4:	a3 01       	movw	r20, r6
 cd6:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 cda:	88 2e       	mov	r8, r24
 cdc:	86 18       	sub	r8, r6
 cde:	fb 2d       	mov	r31, r11
 ce0:	ff 77       	andi	r31, 0x7F	; 127
 ce2:	3f 2e       	mov	r3, r31
 ce4:	36 fe       	sbrs	r3, 6
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x2ca>
 ce8:	23 2d       	mov	r18, r3
 cea:	2e 7f       	andi	r18, 0xFE	; 254
 cec:	a2 2e       	mov	r10, r18
 cee:	89 14       	cp	r8, r9
 cf0:	58 f4       	brcc	.+22     	; 0xd08 <vfprintf+0x2d0>
 cf2:	34 fe       	sbrs	r3, 4
 cf4:	0b c0       	rjmp	.+22     	; 0xd0c <vfprintf+0x2d4>
 cf6:	32 fc       	sbrc	r3, 2
 cf8:	09 c0       	rjmp	.+18     	; 0xd0c <vfprintf+0x2d4>
 cfa:	83 2d       	mov	r24, r3
 cfc:	8e 7e       	andi	r24, 0xEE	; 238
 cfe:	a8 2e       	mov	r10, r24
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <vfprintf+0x2d4>
 d02:	b8 2c       	mov	r11, r8
 d04:	a3 2c       	mov	r10, r3
 d06:	03 c0       	rjmp	.+6      	; 0xd0e <vfprintf+0x2d6>
 d08:	b8 2c       	mov	r11, r8
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <vfprintf+0x2d6>
 d0c:	b9 2c       	mov	r11, r9
 d0e:	a4 fe       	sbrs	r10, 4
 d10:	0f c0       	rjmp	.+30     	; 0xd30 <vfprintf+0x2f8>
 d12:	fe 01       	movw	r30, r28
 d14:	e8 0d       	add	r30, r8
 d16:	f1 1d       	adc	r31, r1
 d18:	80 81       	ld	r24, Z
 d1a:	80 33       	cpi	r24, 0x30	; 48
 d1c:	21 f4       	brne	.+8      	; 0xd26 <vfprintf+0x2ee>
 d1e:	9a 2d       	mov	r25, r10
 d20:	99 7e       	andi	r25, 0xE9	; 233
 d22:	a9 2e       	mov	r10, r25
 d24:	09 c0       	rjmp	.+18     	; 0xd38 <vfprintf+0x300>
 d26:	a2 fe       	sbrs	r10, 2
 d28:	06 c0       	rjmp	.+12     	; 0xd36 <vfprintf+0x2fe>
 d2a:	b3 94       	inc	r11
 d2c:	b3 94       	inc	r11
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <vfprintf+0x300>
 d30:	8a 2d       	mov	r24, r10
 d32:	86 78       	andi	r24, 0x86	; 134
 d34:	09 f0       	breq	.+2      	; 0xd38 <vfprintf+0x300>
 d36:	b3 94       	inc	r11
 d38:	a3 fc       	sbrc	r10, 3
 d3a:	11 c0       	rjmp	.+34     	; 0xd5e <vfprintf+0x326>
 d3c:	a0 fe       	sbrs	r10, 0
 d3e:	06 c0       	rjmp	.+12     	; 0xd4c <vfprintf+0x314>
 d40:	b2 14       	cp	r11, r2
 d42:	88 f4       	brcc	.+34     	; 0xd66 <vfprintf+0x32e>
 d44:	28 0c       	add	r2, r8
 d46:	92 2c       	mov	r9, r2
 d48:	9b 18       	sub	r9, r11
 d4a:	0e c0       	rjmp	.+28     	; 0xd68 <vfprintf+0x330>
 d4c:	b2 14       	cp	r11, r2
 d4e:	60 f4       	brcc	.+24     	; 0xd68 <vfprintf+0x330>
 d50:	b6 01       	movw	r22, r12
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 d5a:	b3 94       	inc	r11
 d5c:	f7 cf       	rjmp	.-18     	; 0xd4c <vfprintf+0x314>
 d5e:	b2 14       	cp	r11, r2
 d60:	18 f4       	brcc	.+6      	; 0xd68 <vfprintf+0x330>
 d62:	2b 18       	sub	r2, r11
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x332>
 d66:	98 2c       	mov	r9, r8
 d68:	21 2c       	mov	r2, r1
 d6a:	a4 fe       	sbrs	r10, 4
 d6c:	10 c0       	rjmp	.+32     	; 0xd8e <vfprintf+0x356>
 d6e:	b6 01       	movw	r22, r12
 d70:	80 e3       	ldi	r24, 0x30	; 48
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 d78:	a2 fe       	sbrs	r10, 2
 d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x372>
 d7c:	a1 fc       	sbrc	r10, 1
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x34e>
 d80:	88 e7       	ldi	r24, 0x78	; 120
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x352>
 d86:	88 e5       	ldi	r24, 0x58	; 88
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	b6 01       	movw	r22, r12
 d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x36e>
 d8e:	8a 2d       	mov	r24, r10
 d90:	86 78       	andi	r24, 0x86	; 134
 d92:	59 f0       	breq	.+22     	; 0xdaa <vfprintf+0x372>
 d94:	a1 fe       	sbrs	r10, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x364>
 d98:	8b e2       	ldi	r24, 0x2B	; 43
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x366>
 d9c:	80 e2       	ldi	r24, 0x20	; 32
 d9e:	a7 fc       	sbrc	r10, 7
 da0:	8d e2       	ldi	r24, 0x2D	; 45
 da2:	b6 01       	movw	r22, r12
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 daa:	89 14       	cp	r8, r9
 dac:	38 f4       	brcc	.+14     	; 0xdbc <vfprintf+0x384>
 dae:	b6 01       	movw	r22, r12
 db0:	80 e3       	ldi	r24, 0x30	; 48
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 db8:	9a 94       	dec	r9
 dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x372>
 dbc:	8a 94       	dec	r8
 dbe:	f3 01       	movw	r30, r6
 dc0:	e8 0d       	add	r30, r8
 dc2:	f1 1d       	adc	r31, r1
 dc4:	80 81       	ld	r24, Z
 dc6:	b6 01       	movw	r22, r12
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 dce:	81 10       	cpse	r8, r1
 dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <vfprintf+0x384>
 dd2:	22 20       	and	r2, r2
 dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x3a0>
 dd6:	42 ce       	rjmp	.-892    	; 0xa5c <vfprintf+0x24>
 dd8:	b6 01       	movw	r22, r12
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 de2:	2a 94       	dec	r2
 de4:	f6 cf       	rjmp	.-20     	; 0xdd2 <vfprintf+0x39a>
 de6:	f6 01       	movw	r30, r12
 de8:	86 81       	ldd	r24, Z+6	; 0x06
 dea:	97 81       	ldd	r25, Z+7	; 0x07
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x3ba>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	2b 96       	adiw	r28, 0x0b	; 11
 df4:	e2 e1       	ldi	r30, 0x12	; 18
 df6:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__epilogue_restores__>

00000dfa <strnlen_P>:
 dfa:	fc 01       	movw	r30, r24
 dfc:	05 90       	lpm	r0, Z+
 dfe:	61 50       	subi	r22, 0x01	; 1
 e00:	70 40       	sbci	r23, 0x00	; 0
 e02:	01 10       	cpse	r0, r1
 e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <strrev>:
 e26:	dc 01       	movw	r26, r24
 e28:	fc 01       	movw	r30, r24
 e2a:	67 2f       	mov	r22, r23
 e2c:	71 91       	ld	r23, Z+
 e2e:	77 23       	and	r23, r23
 e30:	e1 f7       	brne	.-8      	; 0xe2a <strrev+0x4>
 e32:	32 97       	sbiw	r30, 0x02	; 2
 e34:	04 c0       	rjmp	.+8      	; 0xe3e <strrev+0x18>
 e36:	7c 91       	ld	r23, X
 e38:	6d 93       	st	X+, r22
 e3a:	70 83       	st	Z, r23
 e3c:	62 91       	ld	r22, -Z
 e3e:	ae 17       	cp	r26, r30
 e40:	bf 07       	cpc	r27, r31
 e42:	c8 f3       	brcs	.-14     	; 0xe36 <strrev+0x10>
 e44:	08 95       	ret

00000e46 <fputc>:
 e46:	0f 93       	push	r16
 e48:	1f 93       	push	r17
 e4a:	cf 93       	push	r28
 e4c:	df 93       	push	r29
 e4e:	fb 01       	movw	r30, r22
 e50:	23 81       	ldd	r18, Z+3	; 0x03
 e52:	21 fd       	sbrc	r18, 1
 e54:	03 c0       	rjmp	.+6      	; 0xe5c <fputc+0x16>
 e56:	8f ef       	ldi	r24, 0xFF	; 255
 e58:	9f ef       	ldi	r25, 0xFF	; 255
 e5a:	2c c0       	rjmp	.+88     	; 0xeb4 <fputc+0x6e>
 e5c:	22 ff       	sbrs	r18, 2
 e5e:	16 c0       	rjmp	.+44     	; 0xe8c <fputc+0x46>
 e60:	46 81       	ldd	r20, Z+6	; 0x06
 e62:	57 81       	ldd	r21, Z+7	; 0x07
 e64:	24 81       	ldd	r18, Z+4	; 0x04
 e66:	35 81       	ldd	r19, Z+5	; 0x05
 e68:	42 17       	cp	r20, r18
 e6a:	53 07       	cpc	r21, r19
 e6c:	44 f4       	brge	.+16     	; 0xe7e <fputc+0x38>
 e6e:	a0 81       	ld	r26, Z
 e70:	b1 81       	ldd	r27, Z+1	; 0x01
 e72:	9d 01       	movw	r18, r26
 e74:	2f 5f       	subi	r18, 0xFF	; 255
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	31 83       	std	Z+1, r19	; 0x01
 e7a:	20 83       	st	Z, r18
 e7c:	8c 93       	st	X, r24
 e7e:	26 81       	ldd	r18, Z+6	; 0x06
 e80:	37 81       	ldd	r19, Z+7	; 0x07
 e82:	2f 5f       	subi	r18, 0xFF	; 255
 e84:	3f 4f       	sbci	r19, 0xFF	; 255
 e86:	37 83       	std	Z+7, r19	; 0x07
 e88:	26 83       	std	Z+6, r18	; 0x06
 e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <fputc+0x6e>
 e8c:	8b 01       	movw	r16, r22
 e8e:	ec 01       	movw	r28, r24
 e90:	fb 01       	movw	r30, r22
 e92:	00 84       	ldd	r0, Z+8	; 0x08
 e94:	f1 85       	ldd	r31, Z+9	; 0x09
 e96:	e0 2d       	mov	r30, r0
 e98:	09 95       	icall
 e9a:	89 2b       	or	r24, r25
 e9c:	e1 f6       	brne	.-72     	; 0xe56 <fputc+0x10>
 e9e:	d8 01       	movw	r26, r16
 ea0:	16 96       	adiw	r26, 0x06	; 6
 ea2:	8d 91       	ld	r24, X+
 ea4:	9c 91       	ld	r25, X
 ea6:	17 97       	sbiw	r26, 0x07	; 7
 ea8:	01 96       	adiw	r24, 0x01	; 1
 eaa:	17 96       	adiw	r26, 0x07	; 7
 eac:	9c 93       	st	X, r25
 eae:	8e 93       	st	-X, r24
 eb0:	16 97       	sbiw	r26, 0x06	; 6
 eb2:	ce 01       	movw	r24, r28
 eb4:	df 91       	pop	r29
 eb6:	cf 91       	pop	r28
 eb8:	1f 91       	pop	r17
 eba:	0f 91       	pop	r16
 ebc:	08 95       	ret

00000ebe <__ultoa_invert>:
 ebe:	fa 01       	movw	r30, r20
 ec0:	aa 27       	eor	r26, r26
 ec2:	28 30       	cpi	r18, 0x08	; 8
 ec4:	51 f1       	breq	.+84     	; 0xf1a <__ultoa_invert+0x5c>
 ec6:	20 31       	cpi	r18, 0x10	; 16
 ec8:	81 f1       	breq	.+96     	; 0xf2a <__ultoa_invert+0x6c>
 eca:	e8 94       	clt
 ecc:	6f 93       	push	r22
 ece:	6e 7f       	andi	r22, 0xFE	; 254
 ed0:	6e 5f       	subi	r22, 0xFE	; 254
 ed2:	7f 4f       	sbci	r23, 0xFF	; 255
 ed4:	8f 4f       	sbci	r24, 0xFF	; 255
 ed6:	9f 4f       	sbci	r25, 0xFF	; 255
 ed8:	af 4f       	sbci	r26, 0xFF	; 255
 eda:	b1 e0       	ldi	r27, 0x01	; 1
 edc:	3e d0       	rcall	.+124    	; 0xf5a <__ultoa_invert+0x9c>
 ede:	b4 e0       	ldi	r27, 0x04	; 4
 ee0:	3c d0       	rcall	.+120    	; 0xf5a <__ultoa_invert+0x9c>
 ee2:	67 0f       	add	r22, r23
 ee4:	78 1f       	adc	r23, r24
 ee6:	89 1f       	adc	r24, r25
 ee8:	9a 1f       	adc	r25, r26
 eea:	a1 1d       	adc	r26, r1
 eec:	68 0f       	add	r22, r24
 eee:	79 1f       	adc	r23, r25
 ef0:	8a 1f       	adc	r24, r26
 ef2:	91 1d       	adc	r25, r1
 ef4:	a1 1d       	adc	r26, r1
 ef6:	6a 0f       	add	r22, r26
 ef8:	71 1d       	adc	r23, r1
 efa:	81 1d       	adc	r24, r1
 efc:	91 1d       	adc	r25, r1
 efe:	a1 1d       	adc	r26, r1
 f00:	20 d0       	rcall	.+64     	; 0xf42 <__ultoa_invert+0x84>
 f02:	09 f4       	brne	.+2      	; 0xf06 <__ultoa_invert+0x48>
 f04:	68 94       	set
 f06:	3f 91       	pop	r19
 f08:	2a e0       	ldi	r18, 0x0A	; 10
 f0a:	26 9f       	mul	r18, r22
 f0c:	11 24       	eor	r1, r1
 f0e:	30 19       	sub	r19, r0
 f10:	30 5d       	subi	r19, 0xD0	; 208
 f12:	31 93       	st	Z+, r19
 f14:	de f6       	brtc	.-74     	; 0xecc <__ultoa_invert+0xe>
 f16:	cf 01       	movw	r24, r30
 f18:	08 95       	ret
 f1a:	46 2f       	mov	r20, r22
 f1c:	47 70       	andi	r20, 0x07	; 7
 f1e:	40 5d       	subi	r20, 0xD0	; 208
 f20:	41 93       	st	Z+, r20
 f22:	b3 e0       	ldi	r27, 0x03	; 3
 f24:	0f d0       	rcall	.+30     	; 0xf44 <__ultoa_invert+0x86>
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0x5c>
 f28:	f6 cf       	rjmp	.-20     	; 0xf16 <__ultoa_invert+0x58>
 f2a:	46 2f       	mov	r20, r22
 f2c:	4f 70       	andi	r20, 0x0F	; 15
 f2e:	40 5d       	subi	r20, 0xD0	; 208
 f30:	4a 33       	cpi	r20, 0x3A	; 58
 f32:	18 f0       	brcs	.+6      	; 0xf3a <__ultoa_invert+0x7c>
 f34:	49 5d       	subi	r20, 0xD9	; 217
 f36:	31 fd       	sbrc	r19, 1
 f38:	40 52       	subi	r20, 0x20	; 32
 f3a:	41 93       	st	Z+, r20
 f3c:	02 d0       	rcall	.+4      	; 0xf42 <__ultoa_invert+0x84>
 f3e:	a9 f7       	brne	.-22     	; 0xf2a <__ultoa_invert+0x6c>
 f40:	ea cf       	rjmp	.-44     	; 0xf16 <__ultoa_invert+0x58>
 f42:	b4 e0       	ldi	r27, 0x04	; 4
 f44:	a6 95       	lsr	r26
 f46:	97 95       	ror	r25
 f48:	87 95       	ror	r24
 f4a:	77 95       	ror	r23
 f4c:	67 95       	ror	r22
 f4e:	ba 95       	dec	r27
 f50:	c9 f7       	brne	.-14     	; 0xf44 <__ultoa_invert+0x86>
 f52:	00 97       	sbiw	r24, 0x00	; 0
 f54:	61 05       	cpc	r22, r1
 f56:	71 05       	cpc	r23, r1
 f58:	08 95       	ret
 f5a:	9b 01       	movw	r18, r22
 f5c:	ac 01       	movw	r20, r24
 f5e:	0a 2e       	mov	r0, r26
 f60:	06 94       	lsr	r0
 f62:	57 95       	ror	r21
 f64:	47 95       	ror	r20
 f66:	37 95       	ror	r19
 f68:	27 95       	ror	r18
 f6a:	ba 95       	dec	r27
 f6c:	c9 f7       	brne	.-14     	; 0xf60 <__ultoa_invert+0xa2>
 f6e:	62 0f       	add	r22, r18
 f70:	73 1f       	adc	r23, r19
 f72:	84 1f       	adc	r24, r20
 f74:	95 1f       	adc	r25, r21
 f76:	a0 1d       	adc	r26, r0
 f78:	08 95       	ret

00000f7a <__prologue_saves__>:
 f7a:	2f 92       	push	r2
 f7c:	3f 92       	push	r3
 f7e:	4f 92       	push	r4
 f80:	5f 92       	push	r5
 f82:	6f 92       	push	r6
 f84:	7f 92       	push	r7
 f86:	8f 92       	push	r8
 f88:	9f 92       	push	r9
 f8a:	af 92       	push	r10
 f8c:	bf 92       	push	r11
 f8e:	cf 92       	push	r12
 f90:	df 92       	push	r13
 f92:	ef 92       	push	r14
 f94:	ff 92       	push	r15
 f96:	0f 93       	push	r16
 f98:	1f 93       	push	r17
 f9a:	cf 93       	push	r28
 f9c:	df 93       	push	r29
 f9e:	cd b7       	in	r28, 0x3d	; 61
 fa0:	de b7       	in	r29, 0x3e	; 62
 fa2:	ca 1b       	sub	r28, r26
 fa4:	db 0b       	sbc	r29, r27
 fa6:	0f b6       	in	r0, 0x3f	; 63
 fa8:	f8 94       	cli
 faa:	de bf       	out	0x3e, r29	; 62
 fac:	0f be       	out	0x3f, r0	; 63
 fae:	cd bf       	out	0x3d, r28	; 61
 fb0:	09 94       	ijmp

00000fb2 <__epilogue_restores__>:
 fb2:	2a 88       	ldd	r2, Y+18	; 0x12
 fb4:	39 88       	ldd	r3, Y+17	; 0x11
 fb6:	48 88       	ldd	r4, Y+16	; 0x10
 fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 fba:	6e 84       	ldd	r6, Y+14	; 0x0e
 fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc4:	b9 84       	ldd	r11, Y+9	; 0x09
 fc6:	c8 84       	ldd	r12, Y+8	; 0x08
 fc8:	df 80       	ldd	r13, Y+7	; 0x07
 fca:	ee 80       	ldd	r14, Y+6	; 0x06
 fcc:	fd 80       	ldd	r15, Y+5	; 0x05
 fce:	0c 81       	ldd	r16, Y+4	; 0x04
 fd0:	1b 81       	ldd	r17, Y+3	; 0x03
 fd2:	aa 81       	ldd	r26, Y+2	; 0x02
 fd4:	b9 81       	ldd	r27, Y+1	; 0x01
 fd6:	ce 0f       	add	r28, r30
 fd8:	d1 1d       	adc	r29, r1
 fda:	0f b6       	in	r0, 0x3f	; 63
 fdc:	f8 94       	cli
 fde:	de bf       	out	0x3e, r29	; 62
 fe0:	0f be       	out	0x3f, r0	; 63
 fe2:	cd bf       	out	0x3d, r28	; 61
 fe4:	ed 01       	movw	r28, r26
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
